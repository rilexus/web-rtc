{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/authentication/providers/Authentication.provider.tsx\",\n    _s = $RefreshSig$();\n\nimport { useLocalStorage } from \"../../hooks/use-local-storage/useLocalStorage\";\nimport { api } from \"../../api/Api\";\nimport { socketConnector } from \"../../socket/react-socket-connector/react-socket-connector\";\nimport React from \"react\";\nimport { DispatchProvider, ValueProvider } from \"../context/Authentication.context\";\nimport { AuthenticationActionTypes } from \"../types/Authentication.action-type\";\nimport { defaultAuthentication } from \"../context/default-context-value\";\n\nconst _AuthenticationProvider = ({\n  children,\n  login: socketLogin\n}) => {\n  _s();\n\n  const [auth, setValue] = useLocalStorage(\"login\", { ...defaultAuthentication\n  });\n\n  const isAuthenticated = () => {\n    return false;\n  };\n\n  const login = async (name, password) => {\n    // socketLogin(name, password).then((res: any) => {\n    //   console.log(res);\n    //   setValue((val) => ({ ...val, isLoggedIn: true, name: name }));\n    // });\n    const res = await api.login(name, password);\n    console.log(res);\n    setValue(v => ({ ...v,\n      isLoggedIn: true,\n      name: name\n    }));\n  };\n\n  const logout = () => {\n    setValue(val => ({ ...val,\n      isLoggedIn: false,\n      name: \"\",\n      key: \"\"\n    }));\n  };\n\n  const dispatch = action => {\n    var _switch$action$type;\n\n    const _switch = {\n      [AuthenticationActionTypes.login]: action => login(action.payload.name, action.payload.password),\n      [AuthenticationActionTypes.logout]: action => logout()\n    }; // @ts-ignore\n\n    (_switch$action$type = _switch[action.type]) === null || _switch$action$type === void 0 ? void 0 : _switch$action$type.call(_switch, action);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ValueProvider, {\n    value: auth,\n    children: /*#__PURE__*/_jsxDEV(DispatchProvider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(_AuthenticationProvider, \"9Js1fuL8GN2arMKFlXicRCnYd2Y=\", false, function () {\n  return [useLocalStorage];\n});\n\nconst AuthenticationProvider = socketConnector(dispatch => {\n  return {\n    login: (name, password) => dispatch({\n      type: \"login\",\n      payload: {\n        name,\n        password\n      }\n    })\n  };\n})(_AuthenticationProvider);\nexport { AuthenticationProvider };","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/authentication/providers/Authentication.provider.tsx"],"names":["useLocalStorage","api","socketConnector","React","DispatchProvider","ValueProvider","AuthenticationActionTypes","defaultAuthentication","_AuthenticationProvider","children","login","socketLogin","auth","setValue","isAuthenticated","name","password","res","console","log","v","isLoggedIn","logout","val","key","dispatch","action","_switch","payload","type","AuthenticationProvider"],"mappings":";;;;;AAAA,SAASA,eAAT,QAAgC,+CAAhC;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAASC,eAAT,QAAgC,4DAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EAEEC,aAFF,QAGO,mCAHP;AAKA,SAEEC,yBAFF,QAKO,qCALP;AAMA,SAASC,qBAAT,QAAsC,kCAAtC;;AAEA,MAAMC,uBAAuB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAK,EAAEC;AAAnB,CAAD,KAA2C;AAAA;;AACzE,QAAM,CAACC,IAAD,EAAOC,QAAP,IAAmBb,eAAe,CAAqB,OAArB,EAA8B,EACpE,GAAGO;AADiE,GAA9B,CAAxC;;AAIA,QAAMO,eAAe,GAAG,MAAe;AACrC,WAAO,KAAP;AACD,GAFD;;AAIA,QAAMJ,KAAK,GAAG,OAAOK,IAAP,EAAqBC,QAArB,KAA0C;AACtD;AACA;AACA;AACA;AACA,UAAMC,GAAG,GAAG,MAAMhB,GAAG,CAACS,KAAJ,CAAUK,IAAV,EAAgBC,QAAhB,CAAlB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAJ,IAAAA,QAAQ,CAAEO,CAAD,KAAQ,EAAE,GAAGA,CAAL;AAAQC,MAAAA,UAAU,EAAE,IAApB;AAA0BN,MAAAA,IAAI,EAAEA;AAAhC,KAAR,CAAD,CAAR;AACD,GARD;;AAUA,QAAMO,MAAM,GAAG,MAAM;AACnBT,IAAAA,QAAQ,CAAEU,GAAD,KAAU,EAAE,GAAGA,GAAL;AAAUF,MAAAA,UAAU,EAAE,KAAtB;AAA6BN,MAAAA,IAAI,EAAE,EAAnC;AAAuCS,MAAAA,GAAG,EAAE;AAA5C,KAAV,CAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,QAAQ,GAAIC,MAAD,IAAmC;AAAA;;AAClD,UAAMC,OAAO,GAAG;AACd,OAACrB,yBAAyB,CAACI,KAA3B,GAAoCgB,MAAD,IACjChB,KAAK,CAACgB,MAAM,CAACE,OAAP,CAAeb,IAAhB,EAAsBW,MAAM,CAACE,OAAP,CAAeZ,QAArC,CAFO;AAGd,OAACV,yBAAyB,CAACgB,MAA3B,GAAqCI,MAAD,IAA0BJ,MAAM;AAHtD,KAAhB,CADkD,CAMlD;;AACA,2BAAAK,OAAO,CAACD,MAAM,CAACG,IAAR,CAAP,iFAAAF,OAAO,EAAgBD,MAAhB,CAAP;AACD,GARD;;AAUA,sBACE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAEd,IAAtB;AAAA,2BACE,QAAC,gBAAD;AAAkB,MAAA,KAAK,EAAEa,QAAzB;AAAA,gBAAoChB;AAApC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAtCD;;GAAMD,uB;UACqBR,e;;;AAuC3B,MAAM8B,sBAAsB,GAAG5B,eAAe,CAAEuB,QAAD,IAAc;AAC3D,SAAO;AACLf,IAAAA,KAAK,EAAE,CAACK,IAAD,EAAeC,QAAf,KACLS,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,OADC;AAEPD,MAAAA,OAAO,EAAE;AAAEb,QAAAA,IAAF;AAAQC,QAAAA;AAAR;AAFF,KAAD;AAFL,GAAP;AAOD,CAR6C,CAAf,CAQ5BR,uBAR4B,CAA/B;AAUA,SAASsB,sBAAT","sourcesContent":["import { useLocalStorage } from \"../../hooks/use-local-storage/useLocalStorage\";\nimport { api } from \"../../api/Api\";\nimport { socketConnector } from \"../../socket/react-socket-connector/react-socket-connector\";\nimport React from \"react\";\nimport {\n  DispatchProvider,\n  ValueProvider,\n} from \"../context/Authentication.context\";\nimport { AuthenticationType } from \"../types/Authentication.type\";\nimport {\n  AuthenticationActions,\n  AuthenticationActionTypes,\n  LoginAction,\n  LogoutAction,\n} from \"../types/Authentication.action-type\";\nimport { defaultAuthentication } from \"../context/default-context-value\";\n\nconst _AuthenticationProvider = ({ children, login: socketLogin }: any) => {\n  const [auth, setValue] = useLocalStorage<AuthenticationType>(\"login\", {\n    ...defaultAuthentication,\n  });\n\n  const isAuthenticated = (): boolean => {\n    return false;\n  };\n\n  const login = async (name: string, password: string) => {\n    // socketLogin(name, password).then((res: any) => {\n    //   console.log(res);\n    //   setValue((val) => ({ ...val, isLoggedIn: true, name: name }));\n    // });\n    const res = await api.login(name, password);\n    console.log(res);\n    setValue((v) => ({ ...v, isLoggedIn: true, name: name }));\n  };\n\n  const logout = () => {\n    setValue((val) => ({ ...val, isLoggedIn: false, name: \"\", key: \"\" }));\n  };\n\n  const dispatch = (action: AuthenticationActions) => {\n    const _switch = {\n      [AuthenticationActionTypes.login]: (action: LoginAction) =>\n        login(action.payload.name, action.payload.password),\n      [AuthenticationActionTypes.logout]: (action: LogoutAction) => logout(),\n    };\n    // @ts-ignore\n    _switch[action.type]?.(action);\n  };\n\n  return (\n    <ValueProvider value={auth}>\n      <DispatchProvider value={dispatch}>{children}</DispatchProvider>\n    </ValueProvider>\n  );\n};\n\nconst AuthenticationProvider = socketConnector((dispatch) => {\n  return {\n    login: (name: string, password: string) =>\n      dispatch({\n        type: \"login\",\n        payload: { name, password },\n      }),\n  };\n})(_AuthenticationProvider);\n\nexport { AuthenticationProvider };\n"]},"metadata":{},"sourceType":"module"}