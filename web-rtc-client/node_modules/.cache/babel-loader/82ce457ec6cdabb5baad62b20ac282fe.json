{"ast":null,"code":"class EventEmitter {\n  constructor() {\n    this.listeners = {};\n  }\n\n  addEventListener(event, listener) {\n    if (typeof listener !== \"function\") {\n      throw new Error(\"Listener is not a function.\");\n    }\n\n    if (!this.listeners[event]) {\n      // first registration of an event listener\n      this.listeners[event] = [listener];\n      return;\n    }\n\n    this.listeners[event].push(listener);\n  }\n\n  removeEventListener(event, listener) {\n    if (this.listeners[event]) {\n      // remove listener (callback from array)\n      this.listeners[event] = this.listeners[event].filter(l => l !== listener);\n    }\n  }\n\n  on(event, callback) {\n    this.addEventListener(event, callback);\n  }\n\n  emit(event, ...args) {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach(listener => {\n        if (typeof listener === \"function\") {\n          listener(...args);\n        }\n      });\n    }\n  }\n\n}\n\nexport { EventEmitter };","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/pages/chat/web-rtc/EventEmitter.ts"],"names":["EventEmitter","listeners","addEventListener","event","listener","Error","push","removeEventListener","filter","l","on","callback","emit","args","forEach"],"mappings":"AAEA,MAAMA,YAAN,CAAmB;AAAA;AAAA,SACjBC,SADiB,GAC4B,EAD5B;AAAA;;AAGjBC,EAAAA,gBAAgB,CAACC,KAAD,EAAgBC,QAAhB,EAA0C;AACxD,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,YAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD;;AACD,QAAI,CAAC,KAAKJ,SAAL,CAAeE,KAAf,CAAL,EAA4B;AAC1B;AACA,WAAKF,SAAL,CAAeE,KAAf,IAAwB,CAACC,QAAD,CAAxB;AACA;AACD;;AACD,SAAKH,SAAL,CAAeE,KAAf,EAAsBG,IAAtB,CAA2BF,QAA3B;AACD;;AAEDG,EAAAA,mBAAmB,CAACJ,KAAD,EAAgBC,QAAhB,EAA0C;AAC3D,QAAI,KAAKH,SAAL,CAAeE,KAAf,CAAJ,EAA2B;AACzB;AACA,WAAKF,SAAL,CAAeE,KAAf,IAAwB,KAAKF,SAAL,CAAeE,KAAf,EAAsBK,MAAtB,CACrBC,CAAD,IAAOA,CAAC,KAAKL,QADS,CAAxB;AAGD;AACF;;AAEDM,EAAAA,EAAE,CAACP,KAAD,EAAgBQ,QAAhB,EAAwD;AACxD,SAAKT,gBAAL,CAAsBC,KAAtB,EAA6BQ,QAA7B;AACD;;AAEDC,EAAAA,IAAI,CAACT,KAAD,EAAgB,GAAGU,IAAnB,EAAoC;AACtC,QAAI,KAAKZ,SAAL,CAAeE,KAAf,CAAJ,EAA2B;AACzB,WAAKF,SAAL,CAAeE,KAAf,EAAsBW,OAAtB,CAA+BV,QAAD,IAAc;AAC1C,YAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,UAAAA,QAAQ,CAAC,GAAGS,IAAJ,CAAR;AACD;AACF,OAJD;AAKD;AACF;;AApCgB;;AAsCnB,SAASb,YAAT","sourcesContent":["type Callback = (...args: any) => void;\n\nclass EventEmitter {\n  listeners: { [event: string]: Callback[] } = {};\n\n  addEventListener(event: string, listener: Callback): void {\n    if (typeof listener !== \"function\") {\n      throw new Error(\"Listener is not a function.\");\n    }\n    if (!this.listeners[event]) {\n      // first registration of an event listener\n      this.listeners[event] = [listener];\n      return;\n    }\n    this.listeners[event].push(listener);\n  }\n\n  removeEventListener(event: string, listener: Callback): void {\n    if (this.listeners[event]) {\n      // remove listener (callback from array)\n      this.listeners[event] = this.listeners[event].filter(\n        (l) => l !== listener\n      );\n    }\n  }\n\n  on(event: string, callback: (...args: any) => void): void {\n    this.addEventListener(event, callback);\n  }\n\n  emit(event: string, ...args: any): void {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach((listener) => {\n        if (typeof listener === \"function\") {\n          listener(...args);\n        }\n      });\n    }\n  }\n}\nexport { EventEmitter };\n"]},"metadata":{},"sourceType":"module"}