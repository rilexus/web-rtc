{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/context/authentication/Authentication.context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport { createContext } from \"react\";\nimport { useLocalStorage } from \"../../hooks/use-local-storage/useLocalStorage\";\nimport { socketConnector } from \"../../socket/react-socket-connector/react-socket-connector\";\nvar AuthenticationActionTypes;\n\n(function (AuthenticationActionTypes) {\n  AuthenticationActionTypes[\"login\"] = \"login\";\n  AuthenticationActionTypes[\"logout\"] = \"logout\";\n})(AuthenticationActionTypes || (AuthenticationActionTypes = {}));\n\nconst defaultAuthentication = {\n  isLoggedIn: false,\n  key: \"\",\n  name: \"\"\n};\nconst AuthValueContext = /*#__PURE__*/createContext({ ...defaultAuthentication\n});\nconst AuthDispatchContext = /*#__PURE__*/createContext(_c = () => {});\n_c2 = AuthDispatchContext;\nconst ValueProvider = AuthValueContext.Provider;\nValueProvider.displayName = \"ValueProvider\";\nconst DispatchProvider = AuthDispatchContext.Provider;\nDispatchProvider.displayName = \"DispatchProvider\";\n\nconst useAuthentication = () => {\n  _s();\n\n  return [useContext(AuthValueContext), useContext(AuthDispatchContext)];\n};\n\n_s(useAuthentication, \"bm0ZwwmmMt3H7bFMoQVNW1+jl04=\");\n\nconst _AuthenticationProvider = ({\n  children,\n  login: socketLogin\n}) => {\n  _s2();\n\n  const [auth, setValue] = useLocalStorage(\"login\", { ...defaultAuthentication\n  });\n\n  const isAuthenticated = () => {\n    return false;\n  };\n\n  const login = (name, password) => {\n    // socketLogin(name, password).then((res: any) => {\n    //   console.log(res);\n    //   setValue((val) => ({ ...val, isLoggedIn: true, name: name }));\n    // });\n    setValue(v => ({ ...v,\n      isLoggedIn: true,\n      name: name\n    }));\n  };\n\n  const logout = () => {\n    setValue(val => ({ ...val,\n      isLoggedIn: false,\n      name: \"\",\n      key: \"\"\n    }));\n  };\n\n  const dispatch = action => {\n    var _switch$action$type;\n\n    const _switch = {\n      [AuthenticationActionTypes.login]: action => login(action.payload.name, action.payload.password),\n      [AuthenticationActionTypes.logout]: action => logout()\n    }; // @ts-ignore\n\n    (_switch$action$type = _switch[action.type]) === null || _switch$action$type === void 0 ? void 0 : _switch$action$type.call(_switch, action);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ValueProvider, {\n    value: auth,\n    children: /*#__PURE__*/_jsxDEV(DispatchProvider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(_AuthenticationProvider, \"9Js1fuL8GN2arMKFlXicRCnYd2Y=\", false, function () {\n  return [useLocalStorage];\n});\n\nconst AuthenticationProvider = socketConnector(dispatch => {\n  return {\n    login: (name, password) => dispatch({\n      type: \"login\",\n      payload: {\n        name,\n        password\n      }\n    })\n  };\n})(_AuthenticationProvider);\nexport { AuthenticationProvider, useAuthentication, AuthenticationActionTypes };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuthDispatchContext$createContext\");\n$RefreshReg$(_c2, \"AuthDispatchContext\");","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/context/authentication/Authentication.context.tsx"],"names":["React","useContext","createContext","useLocalStorage","socketConnector","AuthenticationActionTypes","defaultAuthentication","isLoggedIn","key","name","AuthValueContext","AuthDispatchContext","ValueProvider","Provider","displayName","DispatchProvider","useAuthentication","_AuthenticationProvider","children","login","socketLogin","auth","setValue","isAuthenticated","password","v","logout","val","dispatch","action","_switch","payload","type","AuthenticationProvider"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,SAASC,eAAT,QAAgC,+CAAhC;AACA,SAASC,eAAT,QAAgC,4DAAhC;IAEKC,yB;;WAAAA,yB;AAAAA,EAAAA,yB;AAAAA,EAAAA,yB;GAAAA,yB,KAAAA,yB;;AAgBL,MAAMC,qBAAqC,GAAG;AAC5CC,EAAAA,UAAU,EAAE,KADgC;AAE5CC,EAAAA,GAAG,EAAE,EAFuC;AAG5CC,EAAAA,IAAI,EAAE;AAHsC,CAA9C;AAUA,MAAMC,gBAAgB,gBAAGR,aAAa,CAAiB,EACrD,GAAGI;AADkD,CAAjB,CAAtC;AAIA,MAAMK,mBAAmB,gBAAGT,aAAa,MAAyB,MAAM,CAAE,CAAjC,CAAzC;MAAMS,mB;AAEN,MAAMC,aAAkB,GAAGF,gBAAgB,CAACG,QAA5C;AACAD,aAAa,CAACE,WAAd,GAA4B,eAA5B;AAEA,MAAMC,gBAAqB,GAAGJ,mBAAmB,CAACE,QAAlD;AACAE,gBAAgB,CAACD,WAAjB,GAA+B,kBAA/B;;AAEA,MAAME,iBAAiB,GAAG,MAAgD;AAAA;;AACxE,SAAO,CACLf,UAAU,CAAiBS,gBAAjB,CADL,EAELT,UAAU,CAAyBU,mBAAzB,CAFL,CAAP;AAID,CALD;;GAAMK,iB;;AAON,MAAMC,uBAAuB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAK,EAAEC;AAAnB,CAAD,KAA2C;AAAA;;AACzE,QAAM,CAACC,IAAD,EAAOC,QAAP,IAAmBnB,eAAe,CAAiB,OAAjB,EAA0B,EAChE,GAAGG;AAD6D,GAA1B,CAAxC;;AAIA,QAAMiB,eAAe,GAAG,MAAe;AACrC,WAAO,KAAP;AACD,GAFD;;AAIA,QAAMJ,KAAK,GAAG,CAACV,IAAD,EAAee,QAAf,KAAoC;AAChD;AACA;AACA;AACA;AACAF,IAAAA,QAAQ,CAAEG,CAAD,KAAQ,EAAE,GAAGA,CAAL;AAAQlB,MAAAA,UAAU,EAAE,IAApB;AAA0BE,MAAAA,IAAI,EAAEA;AAAhC,KAAR,CAAD,CAAR;AACD,GAND;;AAQA,QAAMiB,MAAM,GAAG,MAAM;AACnBJ,IAAAA,QAAQ,CAAEK,GAAD,KAAU,EAAE,GAAGA,GAAL;AAAUpB,MAAAA,UAAU,EAAE,KAAtB;AAA6BE,MAAAA,IAAI,EAAE,EAAnC;AAAuCD,MAAAA,GAAG,EAAE;AAA5C,KAAV,CAAD,CAAR;AACD,GAFD;;AAIA,QAAMoB,QAAQ,GAAIC,MAAD,IAAmC;AAAA;;AAClD,UAAMC,OAAO,GAAG;AACd,OAACzB,yBAAyB,CAACc,KAA3B,GAAoCU,MAAD,IACjCV,KAAK,CAACU,MAAM,CAACE,OAAP,CAAetB,IAAhB,EAAsBoB,MAAM,CAACE,OAAP,CAAeP,QAArC,CAFO;AAGd,OAACnB,yBAAyB,CAACqB,MAA3B,GAAqCG,MAAD,IAA0BH,MAAM;AAHtD,KAAhB,CADkD,CAMlD;;AACA,2BAAAI,OAAO,CAACD,MAAM,CAACG,IAAR,CAAP,iFAAAF,OAAO,EAAgBD,MAAhB,CAAP;AACD,GARD;;AAUA,sBACE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAER,IAAtB;AAAA,2BACE,QAAC,gBAAD;AAAkB,MAAA,KAAK,EAAEO,QAAzB;AAAA,gBAAoCV;AAApC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApCD;;IAAMD,uB;UACqBd,e;;;AAqC3B,MAAM8B,sBAAsB,GAAG7B,eAAe,CAAEwB,QAAD,IAAc;AAC3D,SAAO;AACLT,IAAAA,KAAK,EAAE,CAACV,IAAD,EAAee,QAAf,KACLI,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE,OADC;AAEPD,MAAAA,OAAO,EAAE;AAAEtB,QAAAA,IAAF;AAAQe,QAAAA;AAAR;AAFF,KAAD;AAFL,GAAP;AAOD,CAR6C,CAAf,CAQ5BP,uBAR4B,CAA/B;AAUA,SAASgB,sBAAT,EAAiCjB,iBAAjC,EAAoDX,yBAApD","sourcesContent":["import React, { useContext } from \"react\";\nimport { createContext } from \"react\";\nimport { useLocalStorage } from \"../../hooks/use-local-storage/useLocalStorage\";\nimport { socketConnector } from \"../../socket/react-socket-connector/react-socket-connector\";\n\nenum AuthenticationActionTypes {\n  login = \"login\",\n  logout = \"logout\",\n}\n\ntype LoginAction = {\n  type: AuthenticationActionTypes.login;\n  payload: { name: string; password: string };\n};\ntype LogoutAction = {\n  type: AuthenticationActionTypes.logout;\n};\n\ntype AuthenticationActions = LoginAction | LogoutAction;\n\ntype Authentication = { isLoggedIn: boolean; key: string; name: string };\nconst defaultAuthentication: Authentication = {\n  isLoggedIn: false,\n  key: \"\",\n  name: \"\",\n};\n\ntype AuthenticationDispatch = (\n  action: AuthenticationActions | ((action: AuthenticationActions) => void)\n) => void;\n\nconst AuthValueContext = createContext<Authentication>({\n  ...defaultAuthentication,\n});\n\nconst AuthDispatchContext = createContext<AuthenticationDispatch>(() => {});\n\nconst ValueProvider: any = AuthValueContext.Provider;\nValueProvider.displayName = \"ValueProvider\";\n\nconst DispatchProvider: any = AuthDispatchContext.Provider;\nDispatchProvider.displayName = \"DispatchProvider\";\n\nconst useAuthentication = (): [Authentication, AuthenticationDispatch] => {\n  return [\n    useContext<Authentication>(AuthValueContext),\n    useContext<AuthenticationDispatch>(AuthDispatchContext),\n  ];\n};\n\nconst _AuthenticationProvider = ({ children, login: socketLogin }: any) => {\n  const [auth, setValue] = useLocalStorage<Authentication>(\"login\", {\n    ...defaultAuthentication,\n  });\n\n  const isAuthenticated = (): boolean => {\n    return false;\n  };\n\n  const login = (name: string, password: string) => {\n    // socketLogin(name, password).then((res: any) => {\n    //   console.log(res);\n    //   setValue((val) => ({ ...val, isLoggedIn: true, name: name }));\n    // });\n    setValue((v) => ({ ...v, isLoggedIn: true, name: name }));\n  };\n\n  const logout = () => {\n    setValue((val) => ({ ...val, isLoggedIn: false, name: \"\", key: \"\" }));\n  };\n\n  const dispatch = (action: AuthenticationActions) => {\n    const _switch = {\n      [AuthenticationActionTypes.login]: (action: LoginAction) =>\n        login(action.payload.name, action.payload.password),\n      [AuthenticationActionTypes.logout]: (action: LogoutAction) => logout(),\n    };\n    // @ts-ignore\n    _switch[action.type]?.(action);\n  };\n\n  return (\n    <ValueProvider value={auth}>\n      <DispatchProvider value={dispatch}>{children}</DispatchProvider>\n    </ValueProvider>\n  );\n};\n\nconst AuthenticationProvider = socketConnector((dispatch) => {\n  return {\n    login: (name: string, password: string) =>\n      dispatch({\n        type: \"login\",\n        payload: { name, password },\n      }),\n  };\n})(_AuthenticationProvider);\n\nexport { AuthenticationProvider, useAuthentication, AuthenticationActionTypes };\n"]},"metadata":{},"sourceType":"module"}