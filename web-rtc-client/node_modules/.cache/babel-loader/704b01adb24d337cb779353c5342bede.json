{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/pages/chat/Chat.page.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useLayoutEffect, useRef } from \"react\";\nimport { LogoutButton } from \"./components/logout-button/logout-button\";\nimport { UserList } from \"./components/user-list/UserList\";\nimport { useAuthentication } from \"../../context/authentication/Authentication.context\";\nimport { socket } from \"../../socket/socket\";\nimport { socketConnector } from \"../../socket/react-socket-connector/react-socket-connector\";\nimport { WebRTC } from \"./WebRTC\";\nconst configuration = {\n  iceServers: [{\n    urls: \"stun:stun.1.google.com:19302\"\n  }]\n};\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints);\n};\n\nconst connectVideo = (videoRef, stream) => {\n  videoRef.current.srcObject = stream;\n};\n\nconst emitVideoOffer = (offer, from, to) => {\n  console.log(\"sending offer: \", {\n    offer,\n    to,\n    from\n  });\n  socket.emit(\"video:offer\", {\n    offer,\n    from,\n    to\n  });\n};\n\nconst webRTC = new WebRTC(configuration);\nconst peerConnectionRef = {\n  current: new RTCPeerConnection(configuration)\n};\n\nconst _ChatPage = ({\n  emitVideoOffer\n}) => {\n  _s();\n\n  const [{\n    name: currentUserName\n  }] = useAuthentication();\n  const ownStream = useRef();\n  const ownVideoRef = useRef();\n  const foreignVideoRef = useRef();\n  useLayoutEffect(() => {\n    const call = async () => {\n      peerConnectionRef.current.ontrack = ({\n        streams\n      }) => {\n        console.log(\"adding stream: \", streams[0]);\n        connectVideo(foreignVideoRef, streams[0]);\n      };\n\n      ownStream.current = await openMediaDevices({\n        video: true,\n        audio: true\n      });\n      connectVideo(ownVideoRef, ownStream.current);\n\n      for (const track of ownStream.current.getTracks()) {\n        peerConnectionRef.current.addTrack(track, ownStream.current);\n      }\n\n      socket.on(\"onicecandidate\", ({\n        candidate\n      }) => {\n        console.log(\"got candidate: \", {\n          candidate\n        });\n        peerConnectionRef.current.addIceCandidate(candidate);\n      });\n      socket.on(\"video:answer\", async ({\n        answer,\n        to,\n        from\n      }) => {\n        console.log(\"got answer: \", {\n          answer,\n          to,\n          from\n        });\n        await peerConnectionRef.current.setRemoteDescription(answer);\n      });\n      socket.on(\"video:offer\", async ({\n        offer,\n        to,\n        from\n      }) => {\n        console.log(\"got offer: \", {\n          offer,\n          to,\n          from\n        });\n        await peerConnectionRef.current.setRemoteDescription(offer);\n        const answer = await peerConnectionRef.current.createAnswer();\n        await peerConnectionRef.current.setLocalDescription(answer);\n        console.log(\"sending answer: \", {\n          answer,\n          to: from,\n          from: to\n        });\n        socket.emit(\"video:answer\", {\n          answer,\n          to: from,\n          from: to\n        });\n      });\n    };\n\n    call();\n  }, []);\n\n  const onVideo = async name => {\n    // await webRTC.call(name, currentUserName, ownStream.current);\n    // webRTC.on(\"stream\", ({ streams }) => {\n    //   connectVideo(foreignVideoRef, streams[0]);\n    // });\n    const from = currentUserName;\n    const to = name;\n    const offer = await peerConnectionRef.current.createOffer();\n    await peerConnectionRef.current.setLocalDescription(offer); // emitVideoOffer(offer, from, to);\n\n    socket.emit(\"video:offer\", {\n      offer,\n      from,\n      to\n    });\n\n    peerConnectionRef.current.onicecandidate = ({\n      candidate\n    }) => {\n      if (candidate) {\n        console.log(\"sending candidate: \", {\n          candidate\n        });\n        socket.emit(\"onicecandidate\", {\n          candidate,\n          to,\n          from\n        });\n      }\n    };\n  };\n\n  const onAudio = name => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(UserList, {\n      onAudio: onAudio,\n      onVideo: onVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"local\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            id: \"ownVideo\",\n            ref: ownVideoRef,\n            autoPlay: true,\n            playsInline: true,\n            controls: false,\n            style: {\n              height: \"300px\",\n              width: \"300px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"remote\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            id: \"foreignVideo\",\n            ref: foreignVideoRef,\n            autoPlay: true,\n            playsInline: true,\n            controls: false,\n            style: {\n              height: \"300px\",\n              width: \"300px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(_ChatPage, \"XzCYW2o45EP2XeL4JQxMtwsR8bM=\", false, function () {\n  return [useAuthentication];\n});\n\nconst ChatPage = socketConnector(dispatch => {\n  return {\n    emitVideoOffer: (offer, from, to) => dispatch({\n      type: \"video:offer\",\n      offer,\n      from,\n      to\n    })\n  };\n})(_ChatPage);\nexport { ChatPage };","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/pages/chat/Chat.page.tsx"],"names":["React","useLayoutEffect","useRef","LogoutButton","UserList","useAuthentication","socket","socketConnector","WebRTC","configuration","iceServers","urls","openMediaDevices","constraints","navigator","mediaDevices","getUserMedia","connectVideo","videoRef","stream","current","srcObject","emitVideoOffer","offer","from","to","console","log","emit","webRTC","peerConnectionRef","RTCPeerConnection","_ChatPage","name","currentUserName","ownStream","ownVideoRef","foreignVideoRef","call","ontrack","streams","video","audio","track","getTracks","addTrack","on","candidate","addIceCandidate","answer","setRemoteDescription","createAnswer","setLocalDescription","onVideo","createOffer","onicecandidate","onAudio","height","width","ChatPage","dispatch","type"],"mappings":"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","sourcesContent":["import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { LogoutButton } from \"./components/logout-button/logout-button\";\nimport { UserList } from \"./components/user-list/UserList\";\nimport { useAuthentication } from \"../../context/authentication/Authentication.context\";\nimport { socket } from \"../../socket/socket\";\nimport { socketConnector } from \"../../socket/react-socket-connector/react-socket-connector\";\nimport { RTCPeerConnectionConfig, WebRTC } from \"./WebRTC\";\n\nconst configuration: RTCPeerConnectionConfig = {\n  iceServers: [{ urls: \"stun:stun.1.google.com:19302\" }],\n};\n\nconst openMediaDevices = async (constraints: any) => {\n  return await navigator.mediaDevices.getUserMedia(constraints);\n};\n\nconst connectVideo = (videoRef: any, stream: any) => {\n  videoRef.current.srcObject = stream;\n};\nconst emitVideoOffer = (offer: any, from: string, to: string) => {\n  console.log(\"sending offer: \", { offer, to, from });\n  socket.emit(\"video:offer\", { offer, from, to });\n};\n\nconst webRTC = new WebRTC(configuration);\n\nconst peerConnectionRef = { current: new RTCPeerConnection(configuration) };\n\nconst _ChatPage = ({ emitVideoOffer }: any) => {\n  const [{ name: currentUserName }] = useAuthentication();\n  const ownStream = useRef<any>();\n  const ownVideoRef = useRef<any>();\n  const foreignVideoRef = useRef<any>();\n\n  useLayoutEffect(() => {\n    const call = async () => {\n      peerConnectionRef.current.ontrack = ({ streams }: any) => {\n        console.log(\"adding stream: \", streams[0]);\n        connectVideo(foreignVideoRef, streams[0]);\n      };\n\n      ownStream.current = await openMediaDevices({\n        video: true,\n        audio: true,\n      });\n      connectVideo(ownVideoRef, ownStream.current);\n\n      for (const track of ownStream.current.getTracks()) {\n        peerConnectionRef.current.addTrack(track, ownStream.current);\n      }\n\n      socket.on(\"onicecandidate\", ({ candidate }: any) => {\n        console.log(\"got candidate: \", { candidate });\n        peerConnectionRef.current.addIceCandidate(candidate);\n      });\n\n      socket.on(\"video:answer\", async ({ answer, to, from }: any) => {\n        console.log(\"got answer: \", { answer, to, from });\n        await peerConnectionRef.current.setRemoteDescription(answer);\n      });\n\n      socket.on(\"video:offer\", async ({ offer, to, from }: any) => {\n        console.log(\"got offer: \", { offer, to, from });\n        await peerConnectionRef.current.setRemoteDescription(offer);\n\n        const answer = await peerConnectionRef.current.createAnswer();\n        await peerConnectionRef.current.setLocalDescription(answer);\n\n        console.log(\"sending answer: \", { answer, to: from, from: to });\n        socket.emit(\"video:answer\", { answer, to: from, from: to });\n      });\n    };\n    call();\n  }, []);\n\n  const onVideo = async (name: string) => {\n    // await webRTC.call(name, currentUserName, ownStream.current);\n    // webRTC.on(\"stream\", ({ streams }) => {\n    //   connectVideo(foreignVideoRef, streams[0]);\n    // });\n\n    const from = currentUserName;\n    const to = name;\n    const offer = await peerConnectionRef.current.createOffer();\n    await peerConnectionRef.current.setLocalDescription(offer);\n\n    // emitVideoOffer(offer, from, to);\n    socket.emit(\"video:offer\", { offer, from, to });\n\n    peerConnectionRef.current.onicecandidate = ({ candidate }: any) => {\n      if (candidate) {\n        console.log(\"sending candidate: \", { candidate });\n        socket.emit(\"onicecandidate\", {\n          candidate,\n          to,\n          from,\n        });\n      }\n    };\n  };\n\n  const onAudio = (name: string) => {};\n\n  return (\n    <div>\n      <UserList onAudio={onAudio} onVideo={onVideo} />\n      <LogoutButton />\n      <div>\n        <div>\n          <div>local</div>\n          <div>\n            <video\n              id={\"ownVideo\"}\n              ref={ownVideoRef}\n              autoPlay\n              playsInline\n              controls={false}\n              style={{\n                height: \"300px\",\n                width: \"300px\",\n              }}\n            />\n          </div>\n        </div>\n        <div>\n          <div>remote</div>\n          <div>\n            <video\n              id={\"foreignVideo\"}\n              ref={foreignVideoRef}\n              autoPlay\n              playsInline\n              controls={false}\n              style={{\n                height: \"300px\",\n                width: \"300px\",\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nconst ChatPage = socketConnector((dispatch) => {\n  return {\n    emitVideoOffer: (offer: any, from: string, to: string) =>\n      dispatch({ type: \"video:offer\", offer, from, to }),\n  };\n})(_ChatPage);\nexport { ChatPage };\n"]},"metadata":{},"sourceType":"module"}