{"ast":null,"code":"import { socket } from \"../../socket/socket\";\n\nclass EventListenerContainer {\n  constructor() {\n    this.listeners = {};\n  }\n\n  add(event, callback) {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [callback];\n      return;\n    }\n\n    this.listeners[event].push(callback);\n  }\n\n  remove(event, listener) {\n    if (this.listeners[event]) {\n      this.listeners[event] = this.listeners[event].filter(c => c !== listener);\n    }\n  }\n\n  getEventListeners(event) {\n    if (this.listeners[event]) {\n      return this.listeners[event];\n    }\n\n    return [];\n  }\n\n  getEventListener(event, callback) {\n    if (this.listeners[event]) {\n      return this.listeners[event].find(c => c === callback);\n    }\n\n    return;\n  }\n\n}\n\nclass EventEmitter {\n  constructor() {\n    this.container = void 0;\n    this.container = new EventListenerContainer();\n  }\n\n  addEventListener(event, callback) {\n    this.container.add(event, callback);\n  }\n\n  removeEventListener(event, listener) {\n    this.container.remove(event, listener);\n  }\n\n  on(event, callback) {\n    this.addEventListener(event, callback);\n  }\n\n  emit(event, ...args) {\n    this.container.getEventListeners(event).forEach(listener => {\n      if (typeof listener === \"function\") {\n        listener(...args);\n      }\n    });\n  }\n\n}\n\nclass WebRTC {\n  constructor(config) {\n    this.peerConnection = void 0;\n    this.eventEmitter = void 0;\n    this.eventEmitter = new EventEmitter();\n    console.log(this.eventEmitter);\n    this.peerConnection = new RTCPeerConnection(config);\n\n    this.peerConnection.ontrack = event => {\n      this.emitCall(event);\n    };\n\n    socket.on(\"onicecandidate\", async ({\n      candidate\n    }) => {\n      console.log(\"got candidate: \", {\n        candidate\n      });\n      await this.addCandidate({\n        candidate\n      });\n    });\n    socket.on(\"video:answer\", async ({\n      answer,\n      to,\n      from\n    }) => {\n      console.log(\"got answer: \", {\n        answer,\n        to,\n        from\n      });\n      await this.setRemoteAnswer({\n        answer\n      });\n    });\n    socket.on(\"video:offer\", async ({\n      offer,\n      to,\n      from\n    }) => {\n      console.log(\"got offer: \", {\n        offer,\n        to,\n        from\n      });\n      await this.acceptOffer({\n        offer,\n        to,\n        from\n      });\n    });\n  }\n\n  async setRemoteAnswer({\n    answer\n  }) {\n    await this.peerConnection.setRemoteDescription(answer);\n  }\n\n  async addCandidate({\n    candidate\n  }) {\n    await this.peerConnection.addIceCandidate(candidate);\n  }\n\n  async acceptOffer({\n    offer,\n    from,\n    to\n  }) {\n    console.log(\"accept offer: \", {\n      offer,\n      to,\n      from\n    });\n    await this.setOffer(offer);\n    const answer = this.createAnswer();\n    await this.setLocalAnswer(answer);\n    this.emitAnswer(answer, from, to);\n  }\n\n  async createAnswer() {\n    return await this.peerConnection.createAnswer();\n  }\n\n  emitAnswer(answer, from, to) {\n    console.log(\"sending answer: \", {\n      answer,\n      to: from,\n      from: to\n    });\n    socket.emit(\"video:answer\", {\n      answer,\n      to: from,\n      from: to\n    });\n  }\n\n  async setLocalAnswer(answer) {\n    return this.peerConnection.setLocalDescription(answer);\n  }\n\n  async setOffer(offer) {\n    return this.peerConnection.setRemoteDescription(offer);\n  }\n\n  emitCall(streams) {\n    this.eventEmitter.emit(\"call\", streams);\n  }\n\n  emitVideoOffer(offer, from, to) {\n    console.log(\"sending offer: \", {\n      offer,\n      to,\n      from\n    });\n    socket.emit(\"video:offer\", {\n      offer,\n      from,\n      to\n    });\n  }\n\n  on(event, callback) {\n    this.eventEmitter.addEventListener(event, callback);\n  }\n\n  emitCandidate(candidate, from, to) {\n    if (candidate) {\n      console.log(\"sending candidate: \", {\n        candidate\n      });\n      socket.emit(\"onicecandidate\", {\n        candidate,\n        to,\n        from\n      });\n    }\n  }\n\n  async call(to, from, streams) {\n    for (const track of streams.getTracks()) {\n      this.peerConnection.addTrack(track, streams);\n    }\n\n    const offer = await this.peerConnection.createOffer();\n    await this.peerConnection.setLocalDescription(offer);\n    this.emitVideoOffer(offer, from, to);\n\n    this.peerConnection.onicecandidate = ({\n      candidate\n    }) => {\n      this.emitCandidate(candidate, from, to);\n    };\n  }\n\n}\n\nexport { WebRTC };","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/pages/chat/WebRTC.ts"],"names":["socket","EventListenerContainer","listeners","add","event","callback","push","remove","listener","filter","c","getEventListeners","getEventListener","find","EventEmitter","constructor","container","addEventListener","removeEventListener","on","emit","args","forEach","WebRTC","config","peerConnection","eventEmitter","console","log","RTCPeerConnection","ontrack","emitCall","candidate","addCandidate","answer","to","from","setRemoteAnswer","offer","acceptOffer","setRemoteDescription","addIceCandidate","setOffer","createAnswer","setLocalAnswer","emitAnswer","setLocalDescription","streams","emitVideoOffer","emitCandidate","call","track","getTracks","addTrack","createOffer","onicecandidate"],"mappings":"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","sourcesContent":["import { socket } from \"../../socket/socket\";\n\ntype Callback = (...args: any) => void;\n\nclass EventListenerContainer {\n  listeners: { [event: string]: Callback[] } = {};\n  add(event: string, callback: Callback): void {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [callback];\n      return;\n    }\n    this.listeners[event].push(callback);\n  }\n  remove(event: string, listener: Callback) {\n    if (this.listeners[event]) {\n      this.listeners[event] = this.listeners[event].filter(\n        (c) => c !== listener\n      );\n    }\n  }\n\n  getEventListeners(event: string): Callback[] {\n    if (this.listeners[event]) {\n      return this.listeners[event];\n    }\n    return [];\n  }\n\n  getEventListener(event: string, callback: Callback): Callback | undefined {\n    if (this.listeners[event]) {\n      return this.listeners[event].find((c) => c === callback);\n    }\n    return;\n  }\n}\n\nclass EventEmitter {\n  container: EventListenerContainer;\n  constructor() {\n    this.container = new EventListenerContainer();\n  }\n\n  addEventListener(event: string, callback: Callback): void {\n    this.container.add(event, callback);\n  }\n\n  removeEventListener(event: string, listener: Callback): void {\n    this.container.remove(event, listener);\n  }\n\n  on(event: string, callback: (...args: any) => void): void {\n    this.addEventListener(event, callback);\n  }\n\n  emit(event: string, ...args: any): void {\n    this.container.getEventListeners(event).forEach((listener) => {\n      if (typeof listener === \"function\") {\n        listener(...args);\n      }\n    });\n  }\n}\n\ntype RTCPeerConnectionConfig = {\n  iceServers: { urls: string }[];\n};\nclass WebRTC {\n  peerConnection;\n  eventEmitter;\n  constructor(config: RTCPeerConnectionConfig) {\n    this.eventEmitter = new EventEmitter();\n    console.log(this.eventEmitter);\n    this.peerConnection = new RTCPeerConnection(config);\n\n    this.peerConnection.ontrack = (event) => {\n      this.emitCall(event);\n    };\n\n    socket.on(\"onicecandidate\", async ({ candidate }: any) => {\n      console.log(\"got candidate: \", { candidate });\n      await this.addCandidate({ candidate });\n    });\n\n    socket.on(\"video:answer\", async ({ answer, to, from }: any) => {\n      console.log(\"got answer: \", { answer, to, from });\n      await this.setRemoteAnswer({ answer });\n    });\n\n    socket.on(\"video:offer\", async ({ offer, to, from }: any) => {\n      console.log(\"got offer: \", { offer, to, from });\n      await this.acceptOffer({ offer, to, from });\n    });\n  }\n\n  private async setRemoteAnswer({ answer }: any) {\n    await this.peerConnection.setRemoteDescription(answer);\n  }\n\n  private async addCandidate({ candidate }: any) {\n    await this.peerConnection.addIceCandidate(candidate);\n  }\n\n  private async acceptOffer({\n    offer,\n    from,\n    to,\n  }: {\n    offer: any;\n    from: string;\n    to: string;\n  }) {\n    console.log(\"accept offer: \", { offer, to, from });\n    await this.setOffer(offer);\n    const answer = this.createAnswer();\n    await this.setLocalAnswer(answer);\n    this.emitAnswer(answer, from, to);\n  }\n\n  private async createAnswer() {\n    return await this.peerConnection.createAnswer();\n  }\n\n  private emitAnswer(answer: any, from: string, to: string) {\n    console.log(\"sending answer: \", { answer, to: from, from: to });\n    socket.emit(\"video:answer\", { answer, to: from, from: to });\n  }\n  private async setLocalAnswer(answer: any) {\n    return this.peerConnection.setLocalDescription(answer);\n  }\n  private async setOffer(offer: any) {\n    return this.peerConnection.setRemoteDescription(offer);\n  }\n\n  private emitCall(streams: any): void {\n    this.eventEmitter.emit(\"call\", streams);\n  }\n\n  private emitVideoOffer(offer: any, from: string, to: string) {\n    console.log(\"sending offer: \", { offer, to, from });\n    socket.emit(\"video:offer\", { offer, from, to });\n  }\n\n  on(event: string, callback: Callback) {\n    this.eventEmitter.addEventListener(event, callback);\n  }\n\n  private emitCandidate(candidate: any, from: string, to: string) {\n    if (candidate) {\n      console.log(\"sending candidate: \", { candidate });\n      socket.emit(\"onicecandidate\", {\n        candidate,\n        to,\n        from,\n      });\n    }\n  }\n\n  async call(to: string, from: string, streams: any) {\n    for (const track of streams.getTracks()) {\n      this.peerConnection.addTrack(track, streams);\n    }\n\n    const offer = await this.peerConnection.createOffer();\n    await this.peerConnection.setLocalDescription(offer);\n\n    this.emitVideoOffer(offer, from, to);\n\n    this.peerConnection.onicecandidate = ({ candidate }: any) => {\n      this.emitCandidate(candidate, from, to);\n    };\n  }\n}\n\nexport { WebRTC };\nexport type { RTCPeerConnectionConfig };\n"]},"metadata":{},"sourceType":"module"}