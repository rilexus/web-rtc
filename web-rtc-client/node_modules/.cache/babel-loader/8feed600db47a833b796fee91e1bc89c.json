{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/context/authentication/Authentication.context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport { createContext } from \"react\";\nimport { useLocalStorage } from \"../../hooks/use-local-storage/useLocalStorage\";\nvar AuthenticationActionTypes;\n\n(function (AuthenticationActionTypes) {\n  AuthenticationActionTypes[\"login\"] = \"login\";\n  AuthenticationActionTypes[\"logout\"] = \"logout\";\n})(AuthenticationActionTypes || (AuthenticationActionTypes = {}));\n\nconst defaultAuthentication = {\n  isLoggedIn: false\n};\nconst AuthValueContext = /*#__PURE__*/createContext({ ...defaultAuthentication\n});\nconst AuthDispatchContext = /*#__PURE__*/createContext(_c = () => {});\n_c2 = AuthDispatchContext;\nconst ValueProvider = AuthValueContext.Provider;\nValueProvider.displayName = \"ValueProvider\";\nconst DispatchProvider = AuthDispatchContext.Provider;\nDispatchProvider.displayName = \"DispatchProvider\";\n\nconst useAuthentication = () => {\n  _s();\n\n  return [useContext(AuthValueContext), useContext(AuthDispatchContext)];\n};\n\n_s(useAuthentication, \"bm0ZwwmmMt3H7bFMoQVNW1+jl04=\");\n\nconst AuthenticationProvider = ({\n  children\n}) => {\n  _s2();\n\n  const [{\n    isLoggedIn\n  }, setValue] = useLocalStorage(\"login\", { ...defaultAuthentication\n  });\n\n  const isAuthenticated = () => {\n    return false;\n  };\n\n  const login = (name, password) => {\n    setValue({\n      isLoggedIn: true\n    });\n  };\n\n  const logout = () => {\n    setValue({\n      isLoggedIn: false\n    });\n  };\n\n  const dispatch = action => {\n    switch (action.type) {\n      case AuthenticationActionTypes.login:\n        {\n          login(action.payload.name, action.payload.password);\n          break;\n        }\n\n      case AuthenticationActionTypes.logout:\n        {\n          logout();\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ValueProvider, {\n    value: {\n      isLoggedIn\n    },\n    children: /*#__PURE__*/_jsxDEV(DispatchProvider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(AuthenticationProvider, \"pNY1S0XAStI/WvctVwmPGtkVAFU=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c3 = AuthenticationProvider;\nexport { AuthenticationProvider, useAuthentication, AuthenticationActionTypes };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AuthDispatchContext$createContext\");\n$RefreshReg$(_c2, \"AuthDispatchContext\");\n$RefreshReg$(_c3, \"AuthenticationProvider\");","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/context/authentication/Authentication.context.tsx"],"names":["React","useContext","createContext","useLocalStorage","AuthenticationActionTypes","defaultAuthentication","isLoggedIn","AuthValueContext","AuthDispatchContext","ValueProvider","Provider","displayName","DispatchProvider","useAuthentication","AuthenticationProvider","children","setValue","isAuthenticated","login","name","password","logout","dispatch","action","type","payload"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,SAASC,eAAT,QAAgC,+CAAhC;IAEKC,yB;;WAAAA,yB;AAAAA,EAAAA,yB;AAAAA,EAAAA,yB;GAAAA,yB,KAAAA,yB;;AAgBL,MAAMC,qBAAqC,GAAG;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAA9C;AAMA,MAAMC,gBAAgB,gBAAGL,aAAa,CAAiB,EACrD,GAAGG;AADkD,CAAjB,CAAtC;AAIA,MAAMG,mBAAmB,gBAAGN,aAAa,MAAyB,MAAM,CAAE,CAAjC,CAAzC;MAAMM,mB;AAEN,MAAMC,aAAkB,GAAGF,gBAAgB,CAACG,QAA5C;AACAD,aAAa,CAACE,WAAd,GAA4B,eAA5B;AAEA,MAAMC,gBAAqB,GAAGJ,mBAAmB,CAACE,QAAlD;AACAE,gBAAgB,CAACD,WAAjB,GAA+B,kBAA/B;;AAEA,MAAME,iBAAiB,GAAG,MAAgD;AAAA;;AACxE,SAAO,CACLZ,UAAU,CAAiBM,gBAAjB,CADL,EAELN,UAAU,CAAyBO,mBAAzB,CAFL,CAAP;AAID,CALD;;GAAMK,iB;;AAON,MAAMC,sBAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAAA;;AACpD,QAAM,CAAC;AAAET,IAAAA;AAAF,GAAD,EAAiBU,QAAjB,IAA6Bb,eAAe,CAChD,OADgD,EAEhD,EAAE,GAAGE;AAAL,GAFgD,CAAlD;;AAKA,QAAMY,eAAe,GAAG,MAAe;AACrC,WAAO,KAAP;AACD,GAFD;;AAIA,QAAMC,KAAK,GAAG,CAACC,IAAD,EAAeC,QAAf,KAAoC;AAChDJ,IAAAA,QAAQ,CAAC;AAAEV,MAAAA,UAAU,EAAE;AAAd,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMe,MAAM,GAAG,MAAM;AACnBL,IAAAA,QAAQ,CAAC;AAAEV,MAAAA,UAAU,EAAE;AAAd,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMgB,QAAQ,GAAIC,MAAD,IAAmC;AAClD,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKpB,yBAAyB,CAACc,KAA/B;AAAsC;AACpCA,UAAAA,KAAK,CAACK,MAAM,CAACE,OAAP,CAAeN,IAAhB,EAAsBI,MAAM,CAACE,OAAP,CAAeL,QAArC,CAAL;AACA;AACD;;AACD,WAAKhB,yBAAyB,CAACiB,MAA/B;AAAuC;AACrCA,UAAAA,MAAM;AACN;AACD;;AACD;AAAS;AACP;AACD;AAXH;AAaD,GAdD;;AAgBA,sBACE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAAEf,MAAAA;AAAF,KAAtB;AAAA,2BACE,QAAC,gBAAD;AAAkB,MAAA,KAAK,EAAEgB,QAAzB;AAAA,gBAAoCP;AAApC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvCD;;IAAMD,sB;UAC+BX,e;;;MAD/BW,sB;AAyCN,SAASA,sBAAT,EAAiCD,iBAAjC,EAAoDT,yBAApD","sourcesContent":["import React, { useContext } from \"react\";\nimport { createContext } from \"react\";\nimport { useLocalStorage } from \"../../hooks/use-local-storage/useLocalStorage\";\n\nenum AuthenticationActionTypes {\n  login = \"login\",\n  logout = \"logout\",\n}\n\ntype LoginAction = {\n  type: AuthenticationActionTypes.login;\n  payload: { name: string; password: string };\n};\ntype LogoutAction = {\n  type: AuthenticationActionTypes.logout;\n};\n\ntype AuthenticationActions = LoginAction | LogoutAction;\n\ntype Authentication = { isLoggedIn: boolean };\nconst defaultAuthentication: Authentication = { isLoggedIn: false };\n\ntype AuthenticationDispatch = (\n  action: AuthenticationActions | ((action: AuthenticationActions) => void)\n) => void;\n\nconst AuthValueContext = createContext<Authentication>({\n  ...defaultAuthentication,\n});\n\nconst AuthDispatchContext = createContext<AuthenticationDispatch>(() => {});\n\nconst ValueProvider: any = AuthValueContext.Provider;\nValueProvider.displayName = \"ValueProvider\";\n\nconst DispatchProvider: any = AuthDispatchContext.Provider;\nDispatchProvider.displayName = \"DispatchProvider\";\n\nconst useAuthentication = (): [Authentication, AuthenticationDispatch] => {\n  return [\n    useContext<Authentication>(AuthValueContext),\n    useContext<AuthenticationDispatch>(AuthDispatchContext),\n  ];\n};\n\nconst AuthenticationProvider = ({ children }: any) => {\n  const [{ isLoggedIn }, setValue] = useLocalStorage<{ isLoggedIn: boolean }>(\n    \"login\",\n    { ...defaultAuthentication }\n  );\n\n  const isAuthenticated = (): boolean => {\n    return false;\n  };\n\n  const login = (name: string, password: string) => {\n    setValue({ isLoggedIn: true });\n  };\n\n  const logout = () => {\n    setValue({ isLoggedIn: false });\n  };\n\n  const dispatch = (action: AuthenticationActions) => {\n    switch (action.type) {\n      case AuthenticationActionTypes.login: {\n        login(action.payload.name, action.payload.password);\n        break;\n      }\n      case AuthenticationActionTypes.logout: {\n        logout();\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  };\n\n  return (\n    <ValueProvider value={{ isLoggedIn }}>\n      <DispatchProvider value={dispatch}>{children}</DispatchProvider>\n    </ValueProvider>\n  );\n};\n\nexport { AuthenticationProvider, useAuthentication, AuthenticationActionTypes };\n"]},"metadata":{},"sourceType":"module"}