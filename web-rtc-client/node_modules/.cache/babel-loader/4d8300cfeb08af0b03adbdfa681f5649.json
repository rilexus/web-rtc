{"ast":null,"code":"import { EventEmitter } from \"./web-rtc/EventEmitter\";\nimport io from \"socket.io-client\";\nvar SOCKET_EVENTS;\n\n(function (SOCKET_EVENTS) {\n  SOCKET_EVENTS[\"CONNECT\"] = \"connect\";\n  SOCKET_EVENTS[\"DISCONNECT\"] = \"disconnect\";\n})(SOCKET_EVENTS || (SOCKET_EVENTS = {}));\n\nclass WebRTC extends EventEmitter {\n  constructor(config) {\n    super();\n    this.peerConnection = void 0;\n    this.socket = void 0;\n    const {\n      socket,\n      ...rtcConfiguration\n    } = config;\n    this.peerConnection = new RTCPeerConnection(rtcConfiguration);\n    this.socket = io(socket.url, socket.options);\n    this.socket.on(\"connect\", client => {\n      this.emit(\"connect\");\n    });\n    this.socket.on(\"disconnect\", () => {\n      this.emit(\"disconnect\");\n    });\n  }\n\n  call(id) {}\n\n}\n\nexport { WebRTC };","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/pages/chat/WebRTC.ts"],"names":["EventEmitter","io","SOCKET_EVENTS","WebRTC","constructor","config","peerConnection","socket","rtcConfiguration","RTCPeerConnection","url","options","on","client","emit","call","id"],"mappings":"AAAA,SAASA,YAAT,QAA6B,wBAA7B;AACA,OAAOC,EAAP,MAAe,kBAAf;IAEKC,a;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAeL,MAAMC,MAAN,SAAqBH,YAArB,CAAkC;AAIhCI,EAAAA,WAAW,CAACC,MAAD,EAAkC;AAC3C;AAD2C,SAH7CC,cAG6C;AAAA,SAF7CC,MAE6C;AAE3C,UAAM;AAAEA,MAAAA,MAAF;AAAU,SAAGC;AAAb,QAAkCH,MAAxC;AAEA,SAAKC,cAAL,GAAsB,IAAIG,iBAAJ,CAAsBD,gBAAtB,CAAtB;AACA,SAAKD,MAAL,GAAcN,EAAE,CAACM,MAAM,CAACG,GAAR,EAAaH,MAAM,CAACI,OAApB,CAAhB;AAEA,SAAKJ,MAAL,CAAYK,EAAZ,CAAe,SAAf,EAA2BC,MAAD,IAAiB;AACzC,WAAKC,IAAL,CAAU,SAAV;AACD,KAFD;AAIA,SAAKP,MAAL,CAAYK,EAAZ,CAAe,YAAf,EAA6B,MAAM;AACjC,WAAKE,IAAL,CAAU,YAAV;AACD,KAFD;AAGD;;AAEDC,EAAAA,IAAI,CAACC,EAAD,EAAa,CAAE;;AApBa;;AAuBlC,SAASb,MAAT","sourcesContent":["import { EventEmitter } from \"./web-rtc/EventEmitter\";\nimport io from \"socket.io-client\";\n\nenum SOCKET_EVENTS {\n  CONNECT = \"connect\",\n  DISCONNECT = \"disconnect\",\n}\n\ntype RTCPeerConnectionConfig = {\n  socket: {\n    url: string;\n    options: {\n      path: string;\n    };\n  };\n  iceServers: { urls: string }[];\n};\n\nclass WebRTC extends EventEmitter {\n  peerConnection;\n  socket: SocketIOClient.Socket;\n\n  constructor(config: RTCPeerConnectionConfig) {\n    super();\n    const { socket, ...rtcConfiguration } = config;\n\n    this.peerConnection = new RTCPeerConnection(rtcConfiguration);\n    this.socket = io(socket.url, socket.options);\n\n    this.socket.on(\"connect\", (client: any) => {\n      this.emit(\"connect\");\n    });\n\n    this.socket.on(\"disconnect\", () => {\n      this.emit(\"disconnect\");\n    });\n  }\n\n  call(id: string) {}\n}\n\nexport { WebRTC };\nexport type { RTCPeerConnectionConfig };\n"]},"metadata":{},"sourceType":"module"}