{"ast":null,"code":"import { EventEmitter } from \"./web-rtc/EventEmitter\";\nimport io from \"socket.io-client\";\nvar SOCKET_EVENTS;\n\n(function (SOCKET_EVENTS) {\n  SOCKET_EVENTS[\"CONNECT\"] = \"connect\";\n  SOCKET_EVENTS[\"DISCONNECT\"] = \"disconnect\";\n})(SOCKET_EVENTS || (SOCKET_EVENTS = {}));\n\nclass RTCCall extends EventEmitter {\n  constructor(id, webRTC, options) {\n    super();\n    this.id = id;\n    this.webRTC = webRTC;\n    this.options = options;\n    this.sendOffer();\n  }\n\n  async sendOffer() {\n    const connection = new RTCPeerConnection(this.webRTC.rtcConfiguration);\n    const offer = await connection.createOffer();\n    await connection.setLocalDescription(offer);\n    const from = this.webRTC.socket.id;\n    this.webRTC.socket.emit(\"video:offer\", {\n      offer,\n      from,\n      to: this.id\n    });\n  }\n\n}\n\nclass WebRTC extends EventEmitter {\n  constructor(config) {\n    super();\n    this.peerConnection = void 0;\n    this.socket = void 0;\n    this.rtcConfiguration = void 0;\n    const {\n      socket,\n      ...rtcConfiguration\n    } = config;\n    this.rtcConfiguration = rtcConfiguration;\n    this.peerConnection = new RTCPeerConnection(rtcConfiguration);\n    this.socket = io(socket.url, socket.options);\n    this.socket.on(SOCKET_EVENTS.CONNECT, s => {\n      console.log(\"SOCKET_EVENTS.CONNECT: \", s);\n      this.emit(SOCKET_EVENTS.CONNECT);\n    });\n    this.socket.on(SOCKET_EVENTS.DISCONNECT, () => {\n      this.emit(SOCKET_EVENTS.DISCONNECT);\n    });\n  }\n\n  call(id, stream, options = {}) {\n    options._stream = stream;\n    const call = new RTCCall(id, this, options);\n    return call;\n  }\n\n}\n\nexport { WebRTC };","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/pages/chat/WebRTC.ts"],"names":["EventEmitter","io","SOCKET_EVENTS","RTCCall","constructor","id","webRTC","options","sendOffer","connection","RTCPeerConnection","rtcConfiguration","offer","createOffer","setLocalDescription","from","socket","emit","to","WebRTC","config","peerConnection","url","on","CONNECT","s","console","log","DISCONNECT","call","stream","_stream"],"mappings":"AAAA,SAASA,YAAT,QAA6B,wBAA7B;AACA,OAAOC,EAAP,MAAe,kBAAf;IAEKC,a;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAiBL,MAAMC,OAAN,SAAsBH,YAAtB,CAAmC;AACjCI,EAAAA,WAAW,CACDC,EADC,EAEDC,MAFC,EAGDC,OAHC,EAIT;AACA;AADA,SAHQF,EAGR,GAHQA,EAGR;AAAA,SAFQC,MAER,GAFQA,MAER;AAAA,SADQC,OACR,GADQA,OACR;AAEA,SAAKC,SAAL;AACD;;AAED,QAAMA,SAAN,GAAkB;AAChB,UAAMC,UAAU,GAAG,IAAIC,iBAAJ,CAAsB,KAAKJ,MAAL,CAAYK,gBAAlC,CAAnB;AAEA,UAAMC,KAAK,GAAG,MAAMH,UAAU,CAACI,WAAX,EAApB;AACA,UAAMJ,UAAU,CAACK,mBAAX,CAA+BF,KAA/B,CAAN;AACA,UAAMG,IAAI,GAAG,KAAKT,MAAL,CAAYU,MAAZ,CAAmBX,EAAhC;AAEA,SAAKC,MAAL,CAAYU,MAAZ,CAAmBC,IAAnB,CAAwB,aAAxB,EAAuC;AAAEL,MAAAA,KAAF;AAASG,MAAAA,IAAT;AAAeG,MAAAA,EAAE,EAAE,KAAKb;AAAxB,KAAvC;AACD;;AAlBgC;;AAqBnC,MAAMc,MAAN,SAAqBnB,YAArB,CAAkC;AAKhCI,EAAAA,WAAW,CAACgB,MAAD,EAAqC;AAC9C;AAD8C,SAJhDC,cAIgD;AAAA,SAHhDL,MAGgD;AAAA,SAFhDL,gBAEgD;AAE9C,UAAM;AAAEK,MAAAA,MAAF;AAAU,SAAGL;AAAb,QAAkCS,MAAxC;AACA,SAAKT,gBAAL,GAAwBA,gBAAxB;AAEA,SAAKU,cAAL,GAAsB,IAAIX,iBAAJ,CAAsBC,gBAAtB,CAAtB;AACA,SAAKK,MAAL,GAAcf,EAAE,CAACe,MAAM,CAACM,GAAR,EAAaN,MAAM,CAACT,OAApB,CAAhB;AAEA,SAAKS,MAAL,CAAYO,EAAZ,CAAerB,aAAa,CAACsB,OAA7B,EAAuCC,CAAD,IAAO;AAC3CC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,CAAvC;AACA,WAAKR,IAAL,CAAUf,aAAa,CAACsB,OAAxB;AACD,KAHD;AAKA,SAAKR,MAAL,CAAYO,EAAZ,CAAerB,aAAa,CAAC0B,UAA7B,EAAyC,MAAM;AAC7C,WAAKX,IAAL,CAAUf,aAAa,CAAC0B,UAAxB;AACD,KAFD;AAGD;;AAEDC,EAAAA,IAAI,CAACxB,EAAD,EAAayB,MAAb,EAAkCvB,OAAY,GAAG,EAAjD,EAAqD;AACvDA,IAAAA,OAAO,CAACwB,OAAR,GAAkBD,MAAlB;AAEA,UAAMD,IAAI,GAAG,IAAI1B,OAAJ,CAAYE,EAAZ,EAAgB,IAAhB,EAAsBE,OAAtB,CAAb;AACA,WAAOsB,IAAP;AACD;;AA5B+B;;AA+BlC,SAASV,MAAT","sourcesContent":["import { EventEmitter } from \"./web-rtc/EventEmitter\";\nimport io from \"socket.io-client\";\n\nenum SOCKET_EVENTS {\n  CONNECT = \"connect\",\n  DISCONNECT = \"disconnect\",\n}\ninterface RTCPeerConnectionConfig {\n  iceServers: { urls: string }[];\n}\n\ninterface WebRTCPeerConnectionConfig extends RTCPeerConnectionConfig {\n  socket: {\n    url: string;\n    options: {\n      path: string;\n    };\n  };\n}\n\nclass RTCCall extends EventEmitter {\n  constructor(\n    private id: string,\n    private webRTC: WebRTC,\n    private options: { _stream: MediaStream }\n  ) {\n    super();\n    this.sendOffer();\n  }\n\n  async sendOffer() {\n    const connection = new RTCPeerConnection(this.webRTC.rtcConfiguration);\n\n    const offer = await connection.createOffer();\n    await connection.setLocalDescription(offer);\n    const from = this.webRTC.socket.id;\n\n    this.webRTC.socket.emit(\"video:offer\", { offer, from, to: this.id });\n  }\n}\n\nclass WebRTC extends EventEmitter {\n  peerConnection;\n  socket: SocketIOClient.Socket;\n  rtcConfiguration: RTCPeerConnectionConfig;\n\n  constructor(config: WebRTCPeerConnectionConfig) {\n    super();\n    const { socket, ...rtcConfiguration } = config;\n    this.rtcConfiguration = rtcConfiguration;\n\n    this.peerConnection = new RTCPeerConnection(rtcConfiguration);\n    this.socket = io(socket.url, socket.options);\n\n    this.socket.on(SOCKET_EVENTS.CONNECT, (s) => {\n      console.log(\"SOCKET_EVENTS.CONNECT: \", s);\n      this.emit(SOCKET_EVENTS.CONNECT);\n    });\n\n    this.socket.on(SOCKET_EVENTS.DISCONNECT, () => {\n      this.emit(SOCKET_EVENTS.DISCONNECT);\n    });\n  }\n\n  call(id: string, stream: MediaStream, options: any = {}) {\n    options._stream = stream;\n\n    const call = new RTCCall(id, this, options);\n    return call;\n  }\n}\n\nexport { WebRTC };\nexport type { RTCPeerConnectionConfig };\n"]},"metadata":{},"sourceType":"module"}