{"ast":null,"code":"import { EventEmitter } from \"./web-rtc/EventEmitter\";\nimport io from \"socket.io-client\";\nvar SOCKET_EVENTS;\n\n(function (SOCKET_EVENTS) {\n  SOCKET_EVENTS[\"CONNECT\"] = \"connect\";\n  SOCKET_EVENTS[\"DISCONNECT\"] = \"disconnect\";\n})(SOCKET_EVENTS || (SOCKET_EVENTS = {}));\n\nclass WebRTC extends EventEmitter {\n  constructor(conf) {\n    super();\n    this.peerConnection = void 0;\n    this.socket = void 0;\n    this.peerConnection = new RTCPeerConnection(conf);\n    this.socket = io(conf.socket.url, { ...conf.socket.options\n    });\n    this.socket.on(\"connect\", client => {\n      console.log(client);\n    });\n    this.socket.on(\"disconnect\", () => {});\n  }\n\n  _emit(event, value, callback) {\n    this.socket.emit(event, value, callback);\n  }\n\n  call(id) {}\n\n}\n\nexport { WebRTC };","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/pages/chat/WebRTC.ts"],"names":["EventEmitter","io","SOCKET_EVENTS","WebRTC","constructor","conf","peerConnection","socket","RTCPeerConnection","url","options","on","client","console","log","_emit","event","value","callback","emit","call","id"],"mappings":"AAAA,SAASA,YAAT,QAA6B,wBAA7B;AACA,OAAOC,EAAP,MAAe,kBAAf;IAEKC,a;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAeL,MAAMC,MAAN,SAAqBH,YAArB,CAAkC;AAGhCI,EAAAA,WAAW,CAACC,IAAD,EAAgC;AACzC;AADyC,SAF3CC,cAE2C;AAAA,SAD3CC,MAC2C;AAEzC,SAAKD,cAAL,GAAsB,IAAIE,iBAAJ,CAAsBH,IAAtB,CAAtB;AACA,SAAKE,MAAL,GAAcN,EAAE,CAACI,IAAI,CAACE,MAAL,CAAYE,GAAb,EAAkB,EAAE,GAAGJ,IAAI,CAACE,MAAL,CAAYG;AAAjB,KAAlB,CAAhB;AACA,SAAKH,MAAL,CAAYI,EAAZ,CAAe,SAAf,EAA2BC,MAAD,IAAiB;AACzCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,KAFD;AAGA,SAAKL,MAAL,CAAYI,EAAZ,CAAe,YAAf,EAA6B,MAAM,CAAE,CAArC;AACD;;AAEOI,EAAAA,KAAR,CACEC,KADF,EAEEC,KAFF,EAGEC,QAHF,EAIQ;AACN,SAAKX,MAAL,CAAYY,IAAZ,CAAiBH,KAAjB,EAAwBC,KAAxB,EAA+BC,QAA/B;AACD;;AAEDE,EAAAA,IAAI,CAACC,EAAD,EAAa,CAAE;;AArBa;;AAwBlC,SAASlB,MAAT","sourcesContent":["import { EventEmitter } from \"./web-rtc/EventEmitter\";\nimport io from \"socket.io-client\";\n\nenum SOCKET_EVENTS {\n  CONNECT = \"connect\",\n  DISCONNECT = \"disconnect\",\n}\n\ntype RTCPeerConnectionConfig = {\n  socket: {\n    url: string;\n    options: {\n      path: string;\n    };\n  };\n  iceServers: { urls: string }[];\n};\n\nclass WebRTC extends EventEmitter {\n  peerConnection;\n  socket: SocketIOClient.Socket;\n  constructor(conf: RTCPeerConnectionConfig) {\n    super();\n    this.peerConnection = new RTCPeerConnection(conf);\n    this.socket = io(conf.socket.url, { ...conf.socket.options });\n    this.socket.on(\"connect\", (client: any) => {\n      console.log(client);\n    });\n    this.socket.on(\"disconnect\", () => {});\n  }\n\n  private _emit(\n    event: string,\n    value: any,\n    callback?: (...args: any) => void\n  ): void {\n    this.socket.emit(event, value, callback);\n  }\n\n  call(id: string) {}\n}\n\nexport { WebRTC };\nexport type { RTCPeerConnectionConfig };\n"]},"metadata":{},"sourceType":"module"}