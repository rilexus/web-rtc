{"ast":null,"code":"const AUTHENTICATION_ENDPOINT = \"authentication\";\nconst PATHS = {\n  LOGIN: `/${AUTHENTICATION_ENDPOINT}/login`,\n  LOGOUT: `/${AUTHENTICATION_ENDPOINT}/logout`\n};\n\nclass AuthenticationService {\n  constructor(httpService) {\n    this.httpService = httpService;\n  }\n\n  async login(name, password) {\n    const res = await this.httpService.post(PATHS.LOGIN, {\n      username: name,\n      password\n    }).then(res => res.json()).catch(e => {\n      console.log(e);\n    });\n    console.log(res);\n    return;\n  }\n\n  async logout(username) {\n    return this.httpService.post(PATHS.LOGOUT, {\n      username\n    });\n  }\n\n}\n\nexport { AuthenticationService };","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/authentication/api/Authentication.service.ts"],"names":["AUTHENTICATION_ENDPOINT","PATHS","LOGIN","LOGOUT","AuthenticationService","constructor","httpService","login","name","password","res","post","username","then","json","catch","e","console","log","logout"],"mappings":"AACA,MAAMA,uBAAuB,GAAG,gBAAhC;AAEA,MAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAG,IAAGF,uBAAwB,QADvB;AAEZG,EAAAA,MAAM,EAAG,IAAGH,uBAAwB;AAFxB,CAAd;;AAIA,MAAMI,qBAAN,CAA4B;AAC1BC,EAAAA,WAAW,CAASC,WAAT,EAAmC;AAAA,SAA1BA,WAA0B,GAA1BA,WAA0B;AAAE;;AAEhD,QAAMC,KAAN,CAAYC,IAAZ,EAA0BC,QAA1B,EAA4C;AAC1C,UAAMC,GAAG,GAAG,MAAM,KAAKJ,WAAL,CACfK,IADe,CACVV,KAAK,CAACC,KADI,EACG;AACjBU,MAAAA,QAAQ,EAAEJ,IADO;AAEjBC,MAAAA;AAFiB,KADH,EAKfI,IALe,CAKTH,GAAD,IAASA,GAAG,CAACI,IAAJ,EALC,EAMfC,KANe,CAMRC,CAAD,IAAO;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,KARe,CAAlB;AASAC,IAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ;AACA;AACD;;AAED,QAAMS,MAAN,CAAaP,QAAb,EAA+B;AAC7B,WAAO,KAAKN,WAAL,CAAiBK,IAAjB,CAAsBV,KAAK,CAACE,MAA5B,EAAoC;AACzCS,MAAAA;AADyC,KAApC,CAAP;AAGD;;AArByB;;AAwB5B,SAASR,qBAAT","sourcesContent":["import { HttpService } from \"../../api/Http.service\";\nconst AUTHENTICATION_ENDPOINT = \"authentication\";\n\nconst PATHS = {\n  LOGIN: `/${AUTHENTICATION_ENDPOINT}/login`,\n  LOGOUT: `/${AUTHENTICATION_ENDPOINT}/logout`,\n};\nclass AuthenticationService {\n  constructor(private httpService: HttpService) {}\n\n  async login(name: string, password: string) {\n    const res = await this.httpService\n      .post(PATHS.LOGIN, {\n        username: name,\n        password,\n      })\n      .then((res) => res.json())\n      .catch((e) => {\n        console.log(e);\n      });\n    console.log(res);\n    return;\n  }\n\n  async logout(username: string) {\n    return this.httpService.post(PATHS.LOGOUT, {\n      username,\n    });\n  }\n}\n\nexport { AuthenticationService };\n"]},"metadata":{},"sourceType":"module"}