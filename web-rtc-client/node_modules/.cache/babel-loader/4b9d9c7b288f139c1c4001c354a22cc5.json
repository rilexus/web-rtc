{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport { socketConnector } from \"./socket/react-socket-connector/react-socket-connector\";\nimport { useSubscription } from \"./socket/use-subscription/useSubscription\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { LoginPage } from \"./pages/login/Login.page\";\nimport { ChatPage } from \"./pages/chat/Chat.page\";\nimport { useAuthentication } from \"./context/authentication/Authentication.context\";\nimport { useHistory } from \"react-router-dom\";\nimport { PAGES } from \"./pages/pages\";\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints);\n}; // async function getConnectedDevices(type) {\n//   const devices = await navigator.mediaDevices.enumerateDevices();\n//   console.log(devices)\n//   return devices.filter(device => device.kind === type)\n// }\n//\n// const videoCameras = getConnectedDevices('videoinput');\n// videoCameras.then(v => {\n//   console.log('Video: ', v)\n// })\n//\n// const microphones = getConnectedDevices('audioinput');\n// microphones.then(v => {\n//   console.log('Mic: ', v)\n// })\n\n\nclass SignalingChannel {\n  constructor() {\n    this.id = null;\n    this.subscribers = {// event:[callbacks]\n    };\n  }\n\n  register(id) {\n    this.id = id;\n    fetch(\"/init\", {\n      mode: \"no-cors\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        id: id\n      })\n    }).then(res => res.json()).then(res => {\n      console.log(\"register: \", res);\n    });\n  }\n\n  addEventListener(event, callback) {\n    if (!this.subscribers[event]) {\n      this.subscribers[event] = [callback];\n      return;\n    }\n\n    this.subscribers[event].push(callback);\n  }\n\n  removeEventListener(event, listener) {\n    if (!this.subscribers[event]) {\n      return;\n    }\n\n    this.subscribers[event] = this.subscribers[event].filter(l => l !== listener);\n  }\n\n  send(event) {\n    if (!this.subscribers[event.type]) {\n      // no subscriber for event.type found\n      return;\n    }\n\n    this.subscribers[event.type].forEach(subscriber => {\n      // call all subscribers for event.type\n      if (typeof subscriber === \"function\") {\n        subscriber(event.payload);\n      }\n    });\n  }\n\n}\n\nconst signalingChannel = new SignalingChannel();\nsignalingChannel.addEventListener(\"message\", message => {// New message from remote client received\n});\n\nasync function makeCall() {\n  const configuration = {\n    iceServers: [{\n      urls: \"stun:192.168.2.120:3478\",\n      username: \"username\",\n      credential: \"password\"\n    }]\n  };\n  const peerConnection = new RTCPeerConnection(configuration);\n  signalingChannel.addEventListener(\"answer\", async message => {\n    if (message.payload.answer) {\n      const remoteDesc = new RTCSessionDescription(message.payload.answer);\n      await peerConnection.setRemoteDescription(remoteDesc);\n    }\n  });\n  const offer = await peerConnection.createOffer();\n  console.log(offer);\n  await peerConnection.setLocalDescription(offer);\n  signalingChannel.send({\n    type: \"offer\",\n    payload: {\n      offer\n    }\n  });\n}\n\nfunction App(props) {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [confirmed, setConfirmed] = useState(false);\n  const [{\n    isLoggedIn\n  }, dispatch] = useAuthentication();\n  const history = useHistory();\n  useEffect(() => {\n    if (isLoggedIn) {\n      history.push(PAGES.chat.path);\n    } else {\n      history.push(PAGES.login.path);\n    }\n  }, [isLoggedIn]);\n  useSubscription(\"events\", d => {\n    console.log(d);\n  });\n  const ownVideoRef = useRef();\n  useLayoutEffect(() => {\n    const connect = async () => {\n      try {// const constraints = {'video': true, 'audio': true};\n        // const stream = await openMediaDevices(constraints);\n        //\n        // ownVideoRef.current.srcObject = stream;\n      } catch (e) {\n        console.error(e);\n      }\n    }; // connect()\n\n  }, []);\n  useEffect(() => {\n    if (confirmed) {\n      signalingChannel.register(name);\n    }\n  }, [confirmed]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [confirmed && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          id: \"video\",\n          ref: ownVideoRef,\n          autoPlay: true,\n          playsInline: true,\n          controls: false,\n          style: {\n            height: \"300px\",\n            width: \"300px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => makeCall().then(res => {\n            console.log(res);\n          }),\n          children: \"CALL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"ANSWER\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), !confirmed && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => props.sendEvents(),\n        children: \"click\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: PAGES.login.path,\n          children: /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: PAGES.chat.path,\n          children: /*#__PURE__*/_jsxDEV(ChatPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"OzHSN10YvRwcpCk9hbkOCbGPnCI=\", false, function () {\n  return [useAuthentication, useHistory, useSubscription];\n});\n\n_c = App;\nconst AppWithSocket = socketConnector(dispatch => ({\n  sendEvents: () => {\n    dispatch({\n      type: \"events\",\n      payload: {\n        data: \"fromApp\"\n      }\n    });\n  }\n}))(App);\nexport default AppWithSocket;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/App.tsx"],"names":["React","useEffect","useLayoutEffect","useRef","useState","socketConnector","useSubscription","Switch","Route","LoginPage","ChatPage","useAuthentication","useHistory","PAGES","openMediaDevices","constraints","navigator","mediaDevices","getUserMedia","SignalingChannel","id","subscribers","register","fetch","mode","method","headers","body","JSON","stringify","then","res","json","console","log","addEventListener","event","callback","push","removeEventListener","listener","filter","l","send","type","forEach","subscriber","payload","signalingChannel","message","makeCall","configuration","iceServers","urls","username","credential","peerConnection","RTCPeerConnection","answer","remoteDesc","RTCSessionDescription","setRemoteDescription","offer","createOffer","setLocalDescription","App","props","name","setName","confirmed","setConfirmed","isLoggedIn","dispatch","history","chat","path","login","d","ownVideoRef","connect","e","error","height","width","sendEvents","AppWithSocket","data"],"mappings":"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","sourcesContent":["import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport { socketConnector } from \"./socket/react-socket-connector/react-socket-connector\";\nimport { useSubscription } from \"./socket/use-subscription/useSubscription\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { LoginPage } from \"./pages/login/Login.page\";\nimport { ChatPage } from \"./pages/chat/Chat.page\";\nimport { useAuthentication } from \"./context/authentication/Authentication.context\";\nimport { useHistory } from \"react-router-dom\";\nimport { PAGES } from \"./pages/pages\";\n\nconst openMediaDevices = async (constraints: any) => {\n  return await navigator.mediaDevices.getUserMedia(constraints);\n};\n\n// async function getConnectedDevices(type) {\n//   const devices = await navigator.mediaDevices.enumerateDevices();\n//   console.log(devices)\n//   return devices.filter(device => device.kind === type)\n// }\n//\n// const videoCameras = getConnectedDevices('videoinput');\n// videoCameras.then(v => {\n//   console.log('Video: ', v)\n// })\n//\n// const microphones = getConnectedDevices('audioinput');\n// microphones.then(v => {\n//   console.log('Mic: ', v)\n// })\n\nclass SignalingChannel {\n  id: string | null = null;\n  subscribers: {\n    [key: string]: any;\n  } = {\n    // event:[callbacks]\n  };\n\n  register(id: string) {\n    this.id = id;\n    fetch(\"/init\", {\n      mode: \"no-cors\",\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ id: id }),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        console.log(\"register: \", res);\n      });\n  }\n\n  addEventListener(event: any, callback: any) {\n    if (!this.subscribers[event]) {\n      this.subscribers[event] = [callback];\n      return;\n    }\n    this.subscribers[event].push(callback);\n  }\n\n  removeEventListener(event: any, listener: any) {\n    if (!this.subscribers[event]) {\n      return;\n    }\n    this.subscribers[event] = this.subscribers[event].filter(\n      (l: any) => l !== listener\n    );\n  }\n\n  send(event: any) {\n    if (!this.subscribers[event.type]) {\n      // no subscriber for event.type found\n      return;\n    }\n    this.subscribers[event.type].forEach((subscriber: any) => {\n      // call all subscribers for event.type\n      if (typeof subscriber === \"function\") {\n        subscriber(event.payload);\n      }\n    });\n  }\n}\nconst signalingChannel = new SignalingChannel();\nsignalingChannel.addEventListener(\"message\", (message: any) => {\n  // New message from remote client received\n});\n\nasync function makeCall(): Promise<any> {\n  const configuration = {\n    iceServers: [\n      {\n        urls: \"stun:192.168.2.120:3478\",\n        username: \"username\",\n        credential: \"password\",\n      },\n    ],\n  };\n  const peerConnection = new RTCPeerConnection(configuration);\n  signalingChannel.addEventListener(\"answer\", async (message: any) => {\n    if (message.payload.answer) {\n      const remoteDesc = new RTCSessionDescription(message.payload.answer);\n      await peerConnection.setRemoteDescription(remoteDesc);\n    }\n  });\n  const offer = await peerConnection.createOffer();\n  console.log(offer);\n  await peerConnection.setLocalDescription(offer);\n  signalingChannel.send({ type: \"offer\", payload: { offer } });\n}\n\nfunction App(props: any) {\n  const [name, setName] = useState(\"\");\n  const [confirmed, setConfirmed] = useState(false);\n  const [{ isLoggedIn }, dispatch] = useAuthentication();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      history.push(PAGES.chat.path);\n    } else {\n      history.push(PAGES.login.path);\n    }\n  }, [isLoggedIn]);\n\n  useSubscription(\"events\", (d) => {\n    console.log(d);\n  });\n\n  const ownVideoRef = useRef<any>();\n  useLayoutEffect(() => {\n    const connect = async () => {\n      try {\n        // const constraints = {'video': true, 'audio': true};\n        // const stream = await openMediaDevices(constraints);\n        //\n        // ownVideoRef.current.srcObject = stream;\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    // connect()\n  }, []);\n\n  useEffect(() => {\n    if (confirmed) {\n      signalingChannel.register(name);\n    }\n  }, [confirmed]);\n\n  return (\n    <div className=\"App\">\n      {confirmed && (\n        <div>\n          <div>\n            <video\n              id={\"video\"}\n              ref={ownVideoRef}\n              autoPlay\n              playsInline\n              controls={false}\n              style={{\n                height: \"300px\",\n                width: \"300px\",\n              }}\n            />\n          </div>\n          <div>\n            <button\n              onClick={() =>\n                makeCall().then((res) => {\n                  console.log(res);\n                })\n              }\n            >\n              CALL\n            </button>\n          </div>\n          <div>\n            <button>ANSWER</button>\n          </div>\n        </div>\n      )}\n      {!confirmed && (\n        <div>\n          {/*<NameInput value={name} onChange={(e) => setName(e.target.value) } onConfirm={()=> setConfirmed(true) }/>*/}\n          <button onClick={() => props.sendEvents()}>click</button>\n        </div>\n      )}\n      <div>\n        <Switch>\n          <Route path={PAGES.login.path}>\n            <LoginPage />\n          </Route>\n          <Route path={PAGES.chat.path}>\n            <ChatPage />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nconst AppWithSocket = socketConnector((dispatch: any) => ({\n  sendEvents: () => {\n    dispatch({ type: \"events\", payload: { data: \"fromApp\" } });\n  },\n}))(App);\n\nexport default AppWithSocket;\n"]},"metadata":{},"sourceType":"module"}