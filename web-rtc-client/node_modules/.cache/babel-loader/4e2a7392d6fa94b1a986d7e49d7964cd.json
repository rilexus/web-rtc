{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/context/authentication/Authentication.context.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { createContext } from \"react\";\nimport { useLocalStorage } from \"../../hooks/use-local-storage/useLocalStorage\";\nconst defaultAuthentication = {\n  isLoggedIn: false\n};\nconst AuthValueContext = /*#__PURE__*/createContext({ ...defaultAuthentication\n});\nconst AuthDispatchContext = /*#__PURE__*/createContext(_c = () => {});\n_c2 = AuthDispatchContext;\nconst ValueProvider = AuthValueContext.Provider;\nValueProvider.displayName = 'ValueProvider';\nconst DispatchProvider = AuthDispatchContext.Provider;\nDispatchProvider.displayName = 'DispatchProvider';\n\nconst useAuthentication = () => {\n  _s();\n\n  return [useContext(AuthValueContext), useContext(AuthDispatchContext)];\n};\n\n_s(useAuthentication, \"bm0ZwwmmMt3H7bFMoQVNW1+jl04=\");\n\nconst AuthenticationProvider = ({\n  children\n}) => {\n  _s2();\n\n  const [{\n    isLoggedIn\n  }, setValue] = useLocalStorage('login', { ...defaultAuthentication\n  });\n\n  const isAuthenticated = () => {\n    return false;\n  };\n\n  const login = (name, password) => {\n    setValue({\n      isLoggedIn: true\n    });\n  };\n\n  const dispatch = action => {\n    switch (action.type) {\n      case 'login':\n        {\n          login(action.payload.name, action.payload.password);\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ValueProvider, {\n    value: {\n      isLoggedIn\n    },\n    children: /*#__PURE__*/_jsxDEV(DispatchProvider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(AuthenticationProvider, \"pNY1S0XAStI/WvctVwmPGtkVAFU=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c3 = AuthenticationProvider;\nexport { AuthenticationProvider, useAuthentication };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AuthDispatchContext$createContext\");\n$RefreshReg$(_c2, \"AuthDispatchContext\");\n$RefreshReg$(_c3, \"AuthenticationProvider\");","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/context/authentication/Authentication.context.tsx"],"names":["React","useContext","createContext","useLocalStorage","defaultAuthentication","isLoggedIn","AuthValueContext","AuthDispatchContext","ValueProvider","Provider","displayName","DispatchProvider","useAuthentication","AuthenticationProvider","children","setValue","isAuthenticated","login","name","password","dispatch","action","type","payload"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAAQC,aAAR,QAA4B,OAA5B;AACA,SAAQC,eAAR,QAA8B,+CAA9B;AAMA,MAAMC,qBAAqC,GAAG;AAACC,EAAAA,UAAU,EAAE;AAAb,CAA9C;AAIA,MAAMC,gBAAgB,gBAAGJ,aAAa,CAAiB,EAAC,GAAGE;AAAJ,CAAjB,CAAtC;AAEA,MAAMG,mBAAmB,gBAAGL,aAAa,MAAyB,MAAM,CAAE,CAAjC,CAAzC;MAAMK,mB;AAEN,MAAMC,aAAkB,GAAGF,gBAAgB,CAACG,QAA5C;AACAD,aAAa,CAACE,WAAd,GAA4B,eAA5B;AAEA,MAAMC,gBAAqB,GAAGJ,mBAAmB,CAACE,QAAlD;AACAE,gBAAgB,CAACD,WAAjB,GAA+B,kBAA/B;;AAIA,MAAME,iBAAiB,GAAG,MAA+C;AAAA;;AACvE,SAAO,CAACX,UAAU,CAAiBK,gBAAjB,CAAX,EAA+CL,UAAU,CAAyBM,mBAAzB,CAAzD,CAAP;AACD,CAFD;;GAAMK,iB;;AAIN,MAAMC,sBAAsB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAqB;AAAA;;AAClD,QAAM,CAAC;AAAET,IAAAA;AAAF,GAAD,EAAiBU,QAAjB,IAA6BZ,eAAe,CAAwB,OAAxB,EAAiC,EAAE,GAAGC;AAAL,GAAjC,CAAlD;;AAEA,QAAMY,eAAe,GAAG,MAAe;AACrC,WAAO,KAAP;AACD,GAFD;;AAIA,QAAMC,KAAK,GAAG,CAACC,IAAD,EAAcC,QAAd,KAAmC;AAC/CJ,IAAAA,QAAQ,CAAC;AAACV,MAAAA,UAAU,EAAE;AAAb,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMe,QAAQ,GAAIC,MAAD,IAAmC;AAClD,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,OAAL;AAAa;AACXL,UAAAA,KAAK,CAACI,MAAM,CAACE,OAAP,CAAeL,IAAhB,EAAsBG,MAAM,CAACE,OAAP,CAAeJ,QAArC,CAAL;AACA;AACD;;AACD;AAAQ;AACN;AACD;AAPH;AASD,GAVD;;AAYA,sBACE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAAEd,MAAAA;AAAF,KAAtB;AAAA,2BACE,QAAC,gBAAD;AAAkB,MAAA,KAAK,EAAEe,QAAzB;AAAA,gBACGN;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA9BD;;IAAMD,sB;UAC+BV,e;;;MAD/BU,sB;AAgCN,SAASA,sBAAT,EAAiCD,iBAAjC","sourcesContent":["import React, {useContext} from 'react';\nimport {createContext} from \"react\";\nimport {useLocalStorage} from \"../../hooks/use-local-storage/useLocalStorage\";\n\ntype LoginAction = {type: 'login', payload: {name: string, password: string}}\ntype AuthenticationActions = LoginAction\n\ntype Authentication = {isLoggedIn: boolean}\nconst defaultAuthentication: Authentication = {isLoggedIn: false}\n\ntype AuthenticationDispatch = ((action: AuthenticationActions | ((action: AuthenticationActions) => void)) => void)\n\nconst AuthValueContext = createContext<Authentication>({...defaultAuthentication})\n\nconst AuthDispatchContext = createContext<AuthenticationDispatch>(() => {})\n\nconst ValueProvider: any = AuthValueContext.Provider\nValueProvider.displayName = 'ValueProvider'\n\nconst DispatchProvider: any = AuthDispatchContext.Provider\nDispatchProvider.displayName = 'DispatchProvider'\n\n\n\nconst useAuthentication = ():[Authentication, AuthenticationDispatch] => {\n  return [useContext<Authentication>(AuthValueContext), useContext<AuthenticationDispatch>(AuthDispatchContext)]\n}\n\nconst AuthenticationProvider = ({children}: any) => {\n  const [{ isLoggedIn }, setValue] = useLocalStorage<{isLoggedIn: boolean}>('login', { ...defaultAuthentication })\n\n  const isAuthenticated = (): boolean => {\n    return false\n  }\n\n  const login = (name:string, password: string) => {\n    setValue({isLoggedIn: true})\n  }\n\n  const dispatch = (action: AuthenticationActions) => {\n    switch (action.type){\n      case 'login':{\n        login(action.payload.name, action.payload.password)\n        break;\n      }\n      default:{\n        break\n      }\n    }\n  }\n\n  return (\n    <ValueProvider value={{ isLoggedIn }}>\n      <DispatchProvider value={dispatch}>\n        {children}\n      </DispatchProvider>\n    </ValueProvider>\n  );\n};\n\nexport { AuthenticationProvider, useAuthentication };\n\n\n"]},"metadata":{},"sourceType":"module"}