{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/authentication/providers/Authentication.provider.tsx\",\n    _s = $RefreshSig$();\n\nimport { useLocalStorage } from \"../../hooks/use-local-storage/useLocalStorage\";\nimport { api } from \"../../api/Api\";\nimport React from \"react\";\nimport { DispatchProvider, ValueProvider } from \"../context/Authentication.context\";\nimport { AuthenticationActionTypes } from \"../types/Authentication.action-type\";\nimport { defaultAuthentication } from \"../context/default-context-value\";\nimport { HttpStatus } from \"../../api/http/HttpStatus.enum\";\nimport { HttpError } from \"../../api/http/Http.error\";\n\nconst AuthenticationProvider = ({\n  children\n}) => {\n  _s();\n\n  const [auth, setValue, remove] = useLocalStorage(\"login\", { ...defaultAuthentication\n  });\n\n  const isAuthenticated = () => {\n    return false;\n  };\n\n  const login = async (username, password) => {\n    // socketLogin(name, password).then((res: any) => {\n    //   console.log(res);\n    //   setValue((val) => ({ ...val, isLoggedIn: true, name: name }));\n    // });\n    const res = await api.login(username, password);\n\n    if (res.statusCode === HttpStatus.Forbidden) {\n      throw new HttpError(\"Forbidden\", HttpStatus.FORBIDDEN);\n    }\n\n    setValue(v => ({ ...v,\n      isLoggedIn: true,\n      username: username\n    }));\n  };\n\n  const logout = () => {\n    setValue(val => ({ ...val,\n      isLoggedIn: false,\n      username: \"\",\n      key: \"\"\n    }));\n  };\n\n  const dispatch = action => {\n    var _switch$action$type;\n\n    const _switch = {\n      [AuthenticationActionTypes.login]: action => login(action.payload.name, action.payload.password),\n      [AuthenticationActionTypes.logout]: action => logout()\n    }; // @ts-ignore\n\n    (_switch$action$type = _switch[action.type]) === null || _switch$action$type === void 0 ? void 0 : _switch$action$type.call(_switch, action);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ValueProvider, {\n    value: auth,\n    children: /*#__PURE__*/_jsxDEV(DispatchProvider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthenticationProvider, \"8n9yTZAPxxRxwsSnDZ9NOm7BL40=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = AuthenticationProvider;\nexport { AuthenticationProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthenticationProvider\");","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/authentication/providers/Authentication.provider.tsx"],"names":["useLocalStorage","api","React","DispatchProvider","ValueProvider","AuthenticationActionTypes","defaultAuthentication","HttpStatus","HttpError","AuthenticationProvider","children","auth","setValue","remove","isAuthenticated","login","username","password","res","statusCode","Forbidden","FORBIDDEN","v","isLoggedIn","logout","val","key","dispatch","action","_switch","payload","name","type"],"mappings":";;;;;AAAA,SAASA,eAAT,QAAgC,+CAAhC;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,gBADF,EAEEC,aAFF,QAGO,mCAHP;AAKA,SAEEC,yBAFF,QAKO,qCALP;AAMA,SAASC,qBAAT,QAAsC,kCAAtC;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,SAASC,SAAT,QAA0B,2BAA1B;;AAEA,MAAMC,sBAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAAA;;AACpD,QAAM,CAACC,IAAD,EAAOC,QAAP,EAAiBC,MAAjB,IAA2Bb,eAAe,CAC9C,OAD8C,EAE9C,EACE,GAAGM;AADL,GAF8C,CAAhD;;AAOA,QAAMQ,eAAe,GAAG,MAAe;AACrC,WAAO,KAAP;AACD,GAFD;;AAIA,QAAMC,KAAK,GAAG,OAAOC,QAAP,EAAyBC,QAAzB,KAA8C;AAC1D;AACA;AACA;AACA;AACA,UAAMC,GAAG,GAAG,MAAMjB,GAAG,CAACc,KAAJ,CAAUC,QAAV,EAAoBC,QAApB,CAAlB;;AACA,QAAIC,GAAG,CAACC,UAAJ,KAAmBZ,UAAU,CAACa,SAAlC,EAA6C;AAC3C,YAAM,IAAIZ,SAAJ,CAAc,WAAd,EAA2BD,UAAU,CAACc,SAAtC,CAAN;AACD;;AACDT,IAAAA,QAAQ,CAAEU,CAAD,KAAQ,EAAE,GAAGA,CAAL;AAAQC,MAAAA,UAAU,EAAE,IAApB;AAA0BP,MAAAA,QAAQ,EAAEA;AAApC,KAAR,CAAD,CAAR;AACD,GAVD;;AAYA,QAAMQ,MAAM,GAAG,MAAM;AACnBZ,IAAAA,QAAQ,CAAEa,GAAD,KAAU,EAAE,GAAGA,GAAL;AAAUF,MAAAA,UAAU,EAAE,KAAtB;AAA6BP,MAAAA,QAAQ,EAAE,EAAvC;AAA2CU,MAAAA,GAAG,EAAE;AAAhD,KAAV,CAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,QAAQ,GAAIC,MAAD,IAAmC;AAAA;;AAClD,UAAMC,OAAO,GAAG;AACd,OAACxB,yBAAyB,CAACU,KAA3B,GAAoCa,MAAD,IACjCb,KAAK,CAACa,MAAM,CAACE,OAAP,CAAeC,IAAhB,EAAsBH,MAAM,CAACE,OAAP,CAAeb,QAArC,CAFO;AAGd,OAACZ,yBAAyB,CAACmB,MAA3B,GAAqCI,MAAD,IAA0BJ,MAAM;AAHtD,KAAhB,CADkD,CAMlD;;AACA,2BAAAK,OAAO,CAACD,MAAM,CAACI,IAAR,CAAP,iFAAAH,OAAO,EAAgBD,MAAhB,CAAP;AACD,GARD;;AAUA,sBACE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAEjB,IAAtB;AAAA,2BACE,QAAC,gBAAD;AAAkB,MAAA,KAAK,EAAEgB,QAAzB;AAAA,gBAAoCjB;AAApC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA3CD;;GAAMD,sB;UAC6BT,e;;;KAD7BS,sB;AA6CN,SAASA,sBAAT","sourcesContent":["import { useLocalStorage } from \"../../hooks/use-local-storage/useLocalStorage\";\nimport { api } from \"../../api/Api\";\nimport React from \"react\";\nimport {\n  DispatchProvider,\n  ValueProvider,\n} from \"../context/Authentication.context\";\nimport { AuthenticationType } from \"../types/Authentication.type\";\nimport {\n  AuthenticationActions,\n  AuthenticationActionTypes,\n  LoginAction,\n  LogoutAction,\n} from \"../types/Authentication.action-type\";\nimport { defaultAuthentication } from \"../context/default-context-value\";\nimport { HttpStatus } from \"../../api/http/HttpStatus.enum\";\nimport { HttpError } from \"../../api/http/Http.error\";\n\nconst AuthenticationProvider = ({ children }: any) => {\n  const [auth, setValue, remove] = useLocalStorage<AuthenticationType>(\n    \"login\",\n    {\n      ...defaultAuthentication,\n    }\n  );\n\n  const isAuthenticated = (): boolean => {\n    return false;\n  };\n\n  const login = async (username: string, password: string) => {\n    // socketLogin(name, password).then((res: any) => {\n    //   console.log(res);\n    //   setValue((val) => ({ ...val, isLoggedIn: true, name: name }));\n    // });\n    const res = await api.login(username, password);\n    if (res.statusCode === HttpStatus.Forbidden) {\n      throw new HttpError(\"Forbidden\", HttpStatus.FORBIDDEN);\n    }\n    setValue((v) => ({ ...v, isLoggedIn: true, username: username }));\n  };\n\n  const logout = () => {\n    setValue((val) => ({ ...val, isLoggedIn: false, username: \"\", key: \"\" }));\n  };\n\n  const dispatch = (action: AuthenticationActions) => {\n    const _switch = {\n      [AuthenticationActionTypes.login]: (action: LoginAction) =>\n        login(action.payload.name, action.payload.password),\n      [AuthenticationActionTypes.logout]: (action: LogoutAction) => logout(),\n    };\n    // @ts-ignore\n    _switch[action.type]?.(action);\n  };\n\n  return (\n    <ValueProvider value={auth}>\n      <DispatchProvider value={dispatch}>{children}</DispatchProvider>\n    </ValueProvider>\n  );\n};\n\nexport { AuthenticationProvider };\n"]},"metadata":{},"sourceType":"module"}