{"ast":null,"code":"import { EventEmitter } from \"./web-rtc/EventEmitter\";\nimport io from \"socket.io-client\";\nimport { socket } from \"../../socket/socket\";\nvar SOCKET_EVENTS;\n\n(function (SOCKET_EVENTS) {\n  SOCKET_EVENTS[\"CONNECT\"] = \"connect\";\n  SOCKET_EVENTS[\"DISCONNECT\"] = \"disconnect\";\n})(SOCKET_EVENTS || (SOCKET_EVENTS = {}));\n\nclass RTCCall extends EventEmitter {\n  constructor(id, webRTC, options) {\n    super();\n    this.id = id;\n    this.webRTC = webRTC;\n    this.options = options;\n    this.sendOffer();\n  }\n\n  async sendOffer() {\n    // const connection = new RTCPeerConnection(this.webRTC.rtcConfiguration);\n    for (const track of this.options._stream.getTracks()) {\n      this.webRTC.peerConnection.addTrack(track, this.options._stream);\n    }\n\n    const offer = await this.webRTC.peerConnection.createOffer();\n    await this.webRTC.peerConnection.setLocalDescription(offer);\n    const from = this.webRTC.socket.id;\n    this.webRTC.socket.emit(\"video:offer\", {\n      offer,\n      from,\n      to: this.id\n    });\n  }\n\n}\n\nclass WebRTC extends EventEmitter {\n  constructor(config) {\n    super();\n    this.peerConnection = void 0;\n    this.socket = void 0;\n    this.rtcConfiguration = void 0;\n    const {\n      socket,\n      ...rtcConfiguration\n    } = config;\n    this.rtcConfiguration = rtcConfiguration;\n    this.peerConnection = new RTCPeerConnection(rtcConfiguration);\n    this.socket = io(socket.url, socket.options);\n    this.socket.on(SOCKET_EVENTS.CONNECT, s => {\n      this.emit(SOCKET_EVENTS.CONNECT, this.socket);\n    });\n    this.socket.on(SOCKET_EVENTS.DISCONNECT, () => {\n      this.emit(SOCKET_EVENTS.DISCONNECT, this.socket);\n    });\n    this.socket.on(\"video:offer\", async ({\n      offer,\n      from\n    }) => {\n      console.log(\"got offer\", offer);\n      await this.peerConnection.setRemoteDescription(offer);\n      this.emit(\"call\", {\n        answer: async stream => {\n          for (const track of stream.getTracks()) {\n            this.peerConnection.addTrack(track, stream);\n          }\n\n          const answer = await this.peerConnection.createAnswer();\n          await this.peerConnection.setLocalDescription(answer);\n          console.log(\"sending answer: \", {\n            answer,\n            to: from,\n            from: this.socket.id\n          });\n          this.socket.emit(\"video:answer\", {\n            from: this.socket.id,\n            to: from,\n            answer\n          });\n        }\n      });\n    });\n    this.socket.on(\"onicecandidate\", ({\n      candidate\n    }) => {\n      console.log(\"got candidate: \", {\n        candidate\n      });\n      this.peerConnection.addIceCandidate(candidate);\n    });\n\n    this.peerConnection.ontrack = ({\n      streams\n    }) => {\n      this.emit(\"stream\", {\n        stream: streams[0]\n      });\n    };\n  }\n\n  disconnect() {\n    this.socket.disconnect();\n  }\n\n  call(id, stream, options = {}) {\n    options._stream = stream;\n\n    this.peerConnection.onicecandidate = ({\n      candidate\n    }) => {\n      if (candidate) {\n        console.log(\"sending candidate: \", {\n          candidate\n        });\n        socket.emit(\"onicecandidate\", {\n          candidate,\n          to: id,\n          from: this.socket.id\n        });\n      }\n    };\n\n    const call = new RTCCall(id, this, options);\n    return call;\n  }\n\n}\n\nexport { WebRTC };","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/pages/chat/WebRTC.ts"],"names":["EventEmitter","io","socket","SOCKET_EVENTS","RTCCall","constructor","id","webRTC","options","sendOffer","track","_stream","getTracks","peerConnection","addTrack","offer","createOffer","setLocalDescription","from","emit","to","WebRTC","config","rtcConfiguration","RTCPeerConnection","url","on","CONNECT","s","DISCONNECT","console","log","setRemoteDescription","answer","stream","createAnswer","candidate","addIceCandidate","ontrack","streams","disconnect","call","onicecandidate"],"mappings":"AAAA,SAASA,YAAT,QAA6B,wBAA7B;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,MAAT,QAAuB,qBAAvB;IAEKC,a;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAiBL,MAAMC,OAAN,SAAsBJ,YAAtB,CAAmC;AACjCK,EAAAA,WAAW,CACDC,EADC,EAEDC,MAFC,EAGDC,OAHC,EAIT;AACA;AADA,SAHQF,EAGR,GAHQA,EAGR;AAAA,SAFQC,MAER,GAFQA,MAER;AAAA,SADQC,OACR,GADQA,OACR;AAEA,SAAKC,SAAL;AACD;;AAED,QAAMA,SAAN,GAAkB;AAChB;AAEA,SAAK,MAAMC,KAAX,IAAoB,KAAKF,OAAL,CAAaG,OAAb,CAAqBC,SAArB,EAApB,EAAsD;AACpD,WAAKL,MAAL,CAAYM,cAAZ,CAA2BC,QAA3B,CAAoCJ,KAApC,EAA2C,KAAKF,OAAL,CAAaG,OAAxD;AACD;;AAED,UAAMI,KAAK,GAAG,MAAM,KAAKR,MAAL,CAAYM,cAAZ,CAA2BG,WAA3B,EAApB;AACA,UAAM,KAAKT,MAAL,CAAYM,cAAZ,CAA2BI,mBAA3B,CAA+CF,KAA/C,CAAN;AACA,UAAMG,IAAI,GAAG,KAAKX,MAAL,CAAYL,MAAZ,CAAmBI,EAAhC;AAEA,SAAKC,MAAL,CAAYL,MAAZ,CAAmBiB,IAAnB,CAAwB,aAAxB,EAAuC;AAAEJ,MAAAA,KAAF;AAASG,MAAAA,IAAT;AAAeE,MAAAA,EAAE,EAAE,KAAKd;AAAxB,KAAvC;AACD;;AAtBgC;;AAyBnC,MAAMe,MAAN,SAAqBrB,YAArB,CAAkC;AAKhCK,EAAAA,WAAW,CAACiB,MAAD,EAAqC;AAC9C;AAD8C,SAJhDT,cAIgD;AAAA,SAHhDX,MAGgD;AAAA,SAFhDqB,gBAEgD;AAE9C,UAAM;AAAErB,MAAAA,MAAF;AAAU,SAAGqB;AAAb,QAAkCD,MAAxC;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AAEA,SAAKV,cAAL,GAAsB,IAAIW,iBAAJ,CAAsBD,gBAAtB,CAAtB;AACA,SAAKrB,MAAL,GAAcD,EAAE,CAACC,MAAM,CAACuB,GAAR,EAAavB,MAAM,CAACM,OAApB,CAAhB;AAEA,SAAKN,MAAL,CAAYwB,EAAZ,CAAevB,aAAa,CAACwB,OAA7B,EAAuCC,CAAD,IAAY;AAChD,WAAKT,IAAL,CAAUhB,aAAa,CAACwB,OAAxB,EAAiC,KAAKzB,MAAtC;AACD,KAFD;AAIA,SAAKA,MAAL,CAAYwB,EAAZ,CAAevB,aAAa,CAAC0B,UAA7B,EAAyC,MAAM;AAC7C,WAAKV,IAAL,CAAUhB,aAAa,CAAC0B,UAAxB,EAAoC,KAAK3B,MAAzC;AACD,KAFD;AAIA,SAAKA,MAAL,CAAYwB,EAAZ,CAAe,aAAf,EAA8B,OAAO;AAAEX,MAAAA,KAAF;AAASG,MAAAA;AAAT,KAAP,KAAgC;AAC5DY,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBhB,KAAzB;AAEA,YAAM,KAAKF,cAAL,CAAoBmB,oBAApB,CAAyCjB,KAAzC,CAAN;AAEA,WAAKI,IAAL,CAAU,MAAV,EAAkB;AAChBc,QAAAA,MAAM,EAAE,MAAOC,MAAP,IAAuB;AAC7B,eAAK,MAAMxB,KAAX,IAAoBwB,MAAM,CAACtB,SAAP,EAApB,EAAwC;AACtC,iBAAKC,cAAL,CAAoBC,QAApB,CAA6BJ,KAA7B,EAAoCwB,MAApC;AACD;;AACD,gBAAMD,MAAM,GAAG,MAAM,KAAKpB,cAAL,CAAoBsB,YAApB,EAArB;AACA,gBAAM,KAAKtB,cAAL,CAAoBI,mBAApB,CAAwCgB,MAAxC,CAAN;AAEAH,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC;AAC9BE,YAAAA,MAD8B;AAE9Bb,YAAAA,EAAE,EAAEF,IAF0B;AAG9BA,YAAAA,IAAI,EAAE,KAAKhB,MAAL,CAAYI;AAHY,WAAhC;AAKA,eAAKJ,MAAL,CAAYiB,IAAZ,CAAiB,cAAjB,EAAiC;AAC/BD,YAAAA,IAAI,EAAE,KAAKhB,MAAL,CAAYI,EADa;AAE/Bc,YAAAA,EAAE,EAAEF,IAF2B;AAG/Be,YAAAA;AAH+B,WAAjC;AAKD;AAlBe,OAAlB;AAoBD,KAzBD;AA2BA,SAAK/B,MAAL,CAAYwB,EAAZ,CAAe,gBAAf,EAAiC,CAAC;AAAEU,MAAAA;AAAF,KAAD,KAAwB;AACvDN,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B;AAAEK,QAAAA;AAAF,OAA/B;AACA,WAAKvB,cAAL,CAAoBwB,eAApB,CAAoCD,SAApC;AACD,KAHD;;AAKA,SAAKvB,cAAL,CAAoByB,OAApB,GAA8B,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAsB;AAClD,WAAKpB,IAAL,CAAU,QAAV,EAAoB;AAAEe,QAAAA,MAAM,EAAEK,OAAO,CAAC,CAAD;AAAjB,OAApB;AACD,KAFD;AAGD;;AAEDC,EAAAA,UAAU,GAAG;AACX,SAAKtC,MAAL,CAAYsC,UAAZ;AACD;;AAEDC,EAAAA,IAAI,CAACnC,EAAD,EAAa4B,MAAb,EAAkC1B,OAAY,GAAG,EAAjD,EAAqD;AACvDA,IAAAA,OAAO,CAACG,OAAR,GAAkBuB,MAAlB;;AAEA,SAAKrB,cAAL,CAAoB6B,cAApB,GAAqC,CAAC;AAAEN,MAAAA;AAAF,KAAD,KAAwB;AAC3D,UAAIA,SAAJ,EAAe;AACbN,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmC;AAAEK,UAAAA;AAAF,SAAnC;AACAlC,QAAAA,MAAM,CAACiB,IAAP,CAAY,gBAAZ,EAA8B;AAC5BiB,UAAAA,SAD4B;AAE5BhB,UAAAA,EAAE,EAAEd,EAFwB;AAG5BY,UAAAA,IAAI,EAAE,KAAKhB,MAAL,CAAYI;AAHU,SAA9B;AAKD;AACF,KATD;;AAWA,UAAMmC,IAAI,GAAG,IAAIrC,OAAJ,CAAYE,EAAZ,EAAgB,IAAhB,EAAsBE,OAAtB,CAAb;AACA,WAAOiC,IAAP;AACD;;AA9E+B;;AAiFlC,SAASpB,MAAT","sourcesContent":["import { EventEmitter } from \"./web-rtc/EventEmitter\";\nimport io from \"socket.io-client\";\nimport { socket } from \"../../socket/socket\";\n\nenum SOCKET_EVENTS {\n  CONNECT = \"connect\",\n  DISCONNECT = \"disconnect\",\n}\ninterface RTCPeerConnectionConfig {\n  iceServers: { urls: string }[];\n}\n\ninterface WebRTCPeerConnectionConfig extends RTCPeerConnectionConfig {\n  socket: {\n    url: string;\n    options: {\n      path: string;\n    };\n  };\n}\n\nclass RTCCall extends EventEmitter {\n  constructor(\n    private id: string,\n    private webRTC: WebRTC,\n    private options: { _stream: MediaStream }\n  ) {\n    super();\n    this.sendOffer();\n  }\n\n  async sendOffer() {\n    // const connection = new RTCPeerConnection(this.webRTC.rtcConfiguration);\n\n    for (const track of this.options._stream.getTracks()) {\n      this.webRTC.peerConnection.addTrack(track, this.options._stream);\n    }\n\n    const offer = await this.webRTC.peerConnection.createOffer();\n    await this.webRTC.peerConnection.setLocalDescription(offer);\n    const from = this.webRTC.socket.id;\n\n    this.webRTC.socket.emit(\"video:offer\", { offer, from, to: this.id });\n  }\n}\n\nclass WebRTC extends EventEmitter {\n  peerConnection;\n  socket: SocketIOClient.Socket;\n  rtcConfiguration: RTCPeerConnectionConfig;\n\n  constructor(config: WebRTCPeerConnectionConfig) {\n    super();\n    const { socket, ...rtcConfiguration } = config;\n    this.rtcConfiguration = rtcConfiguration;\n\n    this.peerConnection = new RTCPeerConnection(rtcConfiguration);\n    this.socket = io(socket.url, socket.options);\n\n    this.socket.on(SOCKET_EVENTS.CONNECT, (s: any) => {\n      this.emit(SOCKET_EVENTS.CONNECT, this.socket);\n    });\n\n    this.socket.on(SOCKET_EVENTS.DISCONNECT, () => {\n      this.emit(SOCKET_EVENTS.DISCONNECT, this.socket);\n    });\n\n    this.socket.on(\"video:offer\", async ({ offer, from }: any) => {\n      console.log(\"got offer\", offer);\n\n      await this.peerConnection.setRemoteDescription(offer);\n\n      this.emit(\"call\", {\n        answer: async (stream: any) => {\n          for (const track of stream.getTracks()) {\n            this.peerConnection.addTrack(track, stream);\n          }\n          const answer = await this.peerConnection.createAnswer();\n          await this.peerConnection.setLocalDescription(answer);\n\n          console.log(\"sending answer: \", {\n            answer,\n            to: from,\n            from: this.socket.id,\n          });\n          this.socket.emit(\"video:answer\", {\n            from: this.socket.id,\n            to: from,\n            answer,\n          });\n        },\n      });\n    });\n\n    this.socket.on(\"onicecandidate\", ({ candidate }: any) => {\n      console.log(\"got candidate: \", { candidate });\n      this.peerConnection.addIceCandidate(candidate);\n    });\n\n    this.peerConnection.ontrack = ({ streams }: any) => {\n      this.emit(\"stream\", { stream: streams[0] });\n    };\n  }\n\n  disconnect() {\n    this.socket.disconnect();\n  }\n\n  call(id: string, stream: MediaStream, options: any = {}) {\n    options._stream = stream;\n\n    this.peerConnection.onicecandidate = ({ candidate }: any) => {\n      if (candidate) {\n        console.log(\"sending candidate: \", { candidate });\n        socket.emit(\"onicecandidate\", {\n          candidate,\n          to: id,\n          from: this.socket.id,\n        });\n      }\n    };\n\n    const call = new RTCCall(id, this, options);\n    return call;\n  }\n}\n\nexport { WebRTC };\nexport type { RTCPeerConnectionConfig };\n"]},"metadata":{},"sourceType":"module"}