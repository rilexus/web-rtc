{"ast":null,"code":"import { EventEmitter } from \"./web-rtc/EventEmitter\";\nimport io from \"socket.io-client\";\nvar SOCKET_EVENTS;\n\n(function (SOCKET_EVENTS) {\n  SOCKET_EVENTS[\"CONNECT\"] = \"connect\";\n  SOCKET_EVENTS[\"DISCONNECT\"] = \"disconnect\";\n})(SOCKET_EVENTS || (SOCKET_EVENTS = {}));\n\nclass RTCCall extends EventEmitter {\n  constructor(id, webRTC, options) {\n    super();\n    this.id = id;\n    this.webRTC = webRTC;\n    this.options = options;\n    this.sendOffer();\n  }\n\n  async sendOffer() {\n    // const connection = new RTCPeerConnection(this.webRTC.rtcConfiguration);\n    for (const track of this.options._stream.getTracks()) {\n      this.webRTC.peerConnection.addTrack(track, this.options._stream);\n    }\n\n    const offer = await this.webRTC.peerConnection.createOffer();\n    await this.webRTC.peerConnection.setLocalDescription(offer);\n    const from = this.webRTC.socket.id;\n    this.webRTC.socket.emit(\"video:offer\", {\n      offer,\n      from,\n      to: this.id\n    });\n  }\n\n}\n\nclass WebRTC extends EventEmitter {\n  constructor(config) {\n    super();\n    this.peerConnection = void 0;\n    this.socket = void 0;\n    this.rtcConfiguration = void 0;\n    const {\n      socket,\n      ...rtcConfiguration\n    } = config;\n    this.rtcConfiguration = rtcConfiguration;\n    this.peerConnection = new RTCPeerConnection(rtcConfiguration);\n    this.socket = io(socket.url, socket.options);\n    this.socket.on(SOCKET_EVENTS.CONNECT, s => {\n      this.emit(SOCKET_EVENTS.CONNECT, this.socket);\n    });\n    this.socket.on(SOCKET_EVENTS.DISCONNECT, () => {\n      this.emit(SOCKET_EVENTS.DISCONNECT, this.socket);\n    });\n    this.socket.on(\"video:offer\", ({\n      offer,\n      from\n    }) => {\n      console.log(\"got offer\", offer);\n      this.emit(\"call\", {\n        answer: stream => {\n          for (const track of stream.getTracks()) {\n            this.peerConnection.addTrack(track, stream);\n          }\n\n          const answer = this.peerConnection.createAnswer();\n          this.socket.emit(\"video:answer\", {\n            from: this.socket.id,\n            to: from,\n            answer\n          });\n        }\n      });\n    });\n  }\n\n  disconnect() {\n    this.socket.disconnect();\n  }\n\n  call(id, stream, options = {}) {\n    options._stream = stream;\n    const call = new RTCCall(id, this, options);\n    return call;\n  }\n\n}\n\nexport { WebRTC };","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/pages/chat/WebRTC.ts"],"names":["EventEmitter","io","SOCKET_EVENTS","RTCCall","constructor","id","webRTC","options","sendOffer","track","_stream","getTracks","peerConnection","addTrack","offer","createOffer","setLocalDescription","from","socket","emit","to","WebRTC","config","rtcConfiguration","RTCPeerConnection","url","on","CONNECT","s","DISCONNECT","console","log","answer","stream","createAnswer","disconnect","call"],"mappings":"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","sourcesContent":["import { EventEmitter } from \"./web-rtc/EventEmitter\";\nimport io from \"socket.io-client\";\n\nenum SOCKET_EVENTS {\n  CONNECT = \"connect\",\n  DISCONNECT = \"disconnect\",\n}\ninterface RTCPeerConnectionConfig {\n  iceServers: { urls: string }[];\n}\n\ninterface WebRTCPeerConnectionConfig extends RTCPeerConnectionConfig {\n  socket: {\n    url: string;\n    options: {\n      path: string;\n    };\n  };\n}\n\nclass RTCCall extends EventEmitter {\n  constructor(\n    private id: string,\n    private webRTC: WebRTC,\n    private options: { _stream: MediaStream }\n  ) {\n    super();\n    this.sendOffer();\n  }\n\n  async sendOffer() {\n    // const connection = new RTCPeerConnection(this.webRTC.rtcConfiguration);\n\n    for (const track of this.options._stream.getTracks()) {\n      this.webRTC.peerConnection.addTrack(track, this.options._stream);\n    }\n\n    const offer = await this.webRTC.peerConnection.createOffer();\n    await this.webRTC.peerConnection.setLocalDescription(offer);\n    const from = this.webRTC.socket.id;\n\n    this.webRTC.socket.emit(\"video:offer\", { offer, from, to: this.id });\n  }\n}\n\nclass WebRTC extends EventEmitter {\n  peerConnection;\n  socket: SocketIOClient.Socket;\n  rtcConfiguration: RTCPeerConnectionConfig;\n\n  constructor(config: WebRTCPeerConnectionConfig) {\n    super();\n    const { socket, ...rtcConfiguration } = config;\n    this.rtcConfiguration = rtcConfiguration;\n\n    this.peerConnection = new RTCPeerConnection(rtcConfiguration);\n    this.socket = io(socket.url, socket.options);\n\n    this.socket.on(SOCKET_EVENTS.CONNECT, (s: any) => {\n      this.emit(SOCKET_EVENTS.CONNECT, this.socket);\n    });\n\n    this.socket.on(SOCKET_EVENTS.DISCONNECT, () => {\n      this.emit(SOCKET_EVENTS.DISCONNECT, this.socket);\n    });\n\n    this.socket.on(\"video:offer\", ({ offer, from }: any) => {\n      console.log(\"got offer\", offer);\n      this.emit(\"call\", {\n        answer: (stream: any) => {\n          for (const track of stream.getTracks()) {\n            this.peerConnection.addTrack(track, stream);\n          }\n          const answer = this.peerConnection.createAnswer();\n          this.socket.emit(\"video:answer\", {\n            from: this.socket.id,\n            to: from,\n            answer,\n          });\n        },\n      });\n    });\n  }\n\n  disconnect() {\n    this.socket.disconnect();\n  }\n\n  call(id: string, stream: MediaStream, options: any = {}) {\n    options._stream = stream;\n\n    const call = new RTCCall(id, this, options);\n    return call;\n  }\n}\n\nexport { WebRTC };\nexport type { RTCPeerConnectionConfig };\n"]},"metadata":{},"sourceType":"module"}