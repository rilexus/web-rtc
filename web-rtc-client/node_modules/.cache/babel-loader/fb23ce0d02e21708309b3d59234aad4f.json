{"ast":null,"code":"import { EventEmitter } from \"./web-rtc/EventEmitter\";\nimport io from \"socket.io-client\";\nvar SOCKET_EVENTS;\n\n(function (SOCKET_EVENTS) {\n  SOCKET_EVENTS[\"CONNECT\"] = \"connect\";\n  SOCKET_EVENTS[\"DISCONNECT\"] = \"disconnect\";\n})(SOCKET_EVENTS || (SOCKET_EVENTS = {}));\n\nclass RTCCall extends EventEmitter {\n  constructor(config) {\n    super();\n  }\n\n}\n\nclass WebRTC extends EventEmitter {\n  constructor(config) {\n    super();\n    this.peerConnection = void 0;\n    this.socket = void 0;\n    this.rtcConfiguration = void 0;\n    const {\n      socket,\n      ...rtcConfiguration\n    } = config;\n    this.rtcConfiguration = rtcConfiguration;\n    this.peerConnection = new RTCPeerConnection(rtcConfiguration);\n    this.socket = io(socket.url, socket.options);\n    this.socket.on(SOCKET_EVENTS.CONNECT, () => {\n      this.emit(SOCKET_EVENTS.CONNECT);\n    });\n    this.socket.on(SOCKET_EVENTS.DISCONNECT, () => {\n      this.emit(SOCKET_EVENTS.DISCONNECT);\n    });\n  }\n\n  call(id, stream, options = {}) {\n    return new RTCCall(this.rtcConfiguration);\n  }\n\n}\n\nexport { WebRTC };","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/pages/chat/WebRTC.ts"],"names":["EventEmitter","io","SOCKET_EVENTS","RTCCall","constructor","config","WebRTC","peerConnection","socket","rtcConfiguration","RTCPeerConnection","url","options","on","CONNECT","emit","DISCONNECT","call","id","stream"],"mappings":"AAAA,SAASA,YAAT,QAA6B,wBAA7B;AACA,OAAOC,EAAP,MAAe,kBAAf;IAEKC,a;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a;;AAiBL,MAAMC,OAAN,SAAsBH,YAAtB,CAAmC;AACjCI,EAAAA,WAAW,CAACC,MAAD,EAAkC;AAC3C;AACD;;AAHgC;;AAMnC,MAAMC,MAAN,SAAqBN,YAArB,CAAkC;AAKhCI,EAAAA,WAAW,CAACC,MAAD,EAAqC;AAC9C;AAD8C,SAJhDE,cAIgD;AAAA,SAHhDC,MAGgD;AAAA,SAFhDC,gBAEgD;AAE9C,UAAM;AAAED,MAAAA,MAAF;AAAU,SAAGC;AAAb,QAAkCJ,MAAxC;AACA,SAAKI,gBAAL,GAAwBA,gBAAxB;AAEA,SAAKF,cAAL,GAAsB,IAAIG,iBAAJ,CAAsBD,gBAAtB,CAAtB;AACA,SAAKD,MAAL,GAAcP,EAAE,CAACO,MAAM,CAACG,GAAR,EAAaH,MAAM,CAACI,OAApB,CAAhB;AAEA,SAAKJ,MAAL,CAAYK,EAAZ,CAAeX,aAAa,CAACY,OAA7B,EAAsC,MAAM;AAC1C,WAAKC,IAAL,CAAUb,aAAa,CAACY,OAAxB;AACD,KAFD;AAIA,SAAKN,MAAL,CAAYK,EAAZ,CAAeX,aAAa,CAACc,UAA7B,EAAyC,MAAM;AAC7C,WAAKD,IAAL,CAAUb,aAAa,CAACc,UAAxB;AACD,KAFD;AAGD;;AAEDC,EAAAA,IAAI,CAACC,EAAD,EAAaC,MAAb,EAAkCP,OAAY,GAAG,EAAjD,EAAqD;AACvD,WAAO,IAAIT,OAAJ,CAAY,KAAKM,gBAAjB,CAAP;AACD;;AAxB+B;;AA2BlC,SAASH,MAAT","sourcesContent":["import { EventEmitter } from \"./web-rtc/EventEmitter\";\nimport io from \"socket.io-client\";\n\nenum SOCKET_EVENTS {\n  CONNECT = \"connect\",\n  DISCONNECT = \"disconnect\",\n}\ninterface RTCPeerConnectionConfig {\n  iceServers: { urls: string }[];\n}\n\ninterface WebRTCPeerConnectionConfig extends RTCPeerConnectionConfig {\n  socket: {\n    url: string;\n    options: {\n      path: string;\n    };\n  };\n}\n\nclass RTCCall extends EventEmitter {\n  constructor(config: RTCPeerConnectionConfig) {\n    super();\n  }\n}\n\nclass WebRTC extends EventEmitter {\n  peerConnection;\n  socket: SocketIOClient.Socket;\n  rtcConfiguration: RTCPeerConnectionConfig;\n\n  constructor(config: WebRTCPeerConnectionConfig) {\n    super();\n    const { socket, ...rtcConfiguration } = config;\n    this.rtcConfiguration = rtcConfiguration;\n\n    this.peerConnection = new RTCPeerConnection(rtcConfiguration);\n    this.socket = io(socket.url, socket.options);\n\n    this.socket.on(SOCKET_EVENTS.CONNECT, () => {\n      this.emit(SOCKET_EVENTS.CONNECT);\n    });\n\n    this.socket.on(SOCKET_EVENTS.DISCONNECT, () => {\n      this.emit(SOCKET_EVENTS.DISCONNECT);\n    });\n  }\n\n  call(id: string, stream: MediaStream, options: any = {}) {\n    return new RTCCall(this.rtcConfiguration);\n  }\n}\n\nexport { WebRTC };\nexport type { RTCPeerConnectionConfig };\n"]},"metadata":{},"sourceType":"module"}