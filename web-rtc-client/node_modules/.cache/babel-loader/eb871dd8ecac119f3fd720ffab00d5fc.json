{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/pages/chat/Chat.page.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { LogoutButton } from \"./components/logout-button/logout-button\";\nimport { UserList } from \"./components/user-list/UserList\";\nimport { socket } from \"../../socket/socket\";\nimport { useAuthentication } from \"../../context/authentication/Authentication.context\";\n\nconst openMediaDevices = async constraints => {\n  return await navigator.mediaDevices.getUserMedia(constraints);\n};\n\nconst constraints = {\n  video: true,\n  audio: false\n};\nlet localStream = null;\nconst remoteStream = new MediaStream();\nconst configuration = {\n  iceServers: [{\n    urls: \"turn:10.103.0.246:3478\",\n    username: \"username\",\n    credential: \"password\"\n  }]\n}; // let peerConnection = new RTCPeerConnection(configuration);\n\nconst ChatPage = () => {\n  _s();\n\n  const [hasOffer, setHasOffer] = useState(false);\n  const ownVideoRef = useRef();\n  const foreignVideoRef = useRef();\n  const peerConnectionRef = useRef();\n  const offerRef = useRef({\n    from: null,\n    offer: null\n  });\n  const [isCalling, setIsCalling] = useState(false);\n  const [{\n    name: currentUserName\n  }] = useAuthentication();\n  useEffect(() => {// peerConnection.addEventListener(\"signalingstatechange\", (event) => {\n    //   console.log(\"signalingstatechange: \", event);\n    // });\n    // peerConnectionRef.current.addEventListener(\"icecandidate\", (event: any) => {\n    //   console.log(\"icecandidate: \", event);\n    // });\n    // peerConnectionRef.current.addEventListener(\"icegatheringstatechange\", (event: any) => {\n    //   console.log(\"icegatheringstatechange: \", event);\n    // });\n  }, []); // useSubscription(\"video:answer\", async ({ answer, from }) => {\n  //   const remoteDesc = new RTCSessionDescription(answer);\n  //   await peerConnection.setRemoteDescription(remoteDesc);\n  //   setIsCalling(false);\n  //\n  //   localStream.getTracks().forEach((track: any) => {\n  //     peerConnection.addTrack(track, localStream);\n  //   });\n  //\n  //   // console.log(answer, from);\n  // });\n  // useSubscription(\"video:offer\", async ({ offer, from }) => {\n  //   setHasOffer(true);\n  //   offerRef.current = { offer, from };\n  //   // console.log(offer, from);\n  // });\n\n  useEffect(() => {\n    socket.on(\"video:offer\", async data => {\n      const {\n        to,\n        from,\n        offer\n      } = data;\n      console.log(\"got offer: \", {\n        to,\n        from,\n        offer\n      });\n      peerConnectionRef.current = new RTCPeerConnection(configuration);\n      peerConnectionRef.current.addEventListener(\"signalingstatechange\", event => {\n        console.log(\"signalingstatechange: \", event);\n      });\n      await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(offer));\n      const answer = await peerConnectionRef.current.createAnswer();\n      await peerConnectionRef.current.setLocalDescription(answer);\n      localStream.getTracks().forEach(track => {\n        peerConnectionRef.current.addTrack(track, localStream);\n      });\n      socket.emit(\"video:answer\", {\n        answer: answer,\n        to: from,\n        from: to\n      });\n    });\n  }, []);\n\n  const pickUp = async () => {// if (offerRef.current.offer) {\n    //   // create answer\n    //   const { from, offer } = offerRef.current;\n    //   await peerConnection.setRemoteDescription(\n    //     new RTCSessionDescription(offer)\n    //   );\n    //   const answer = await peerConnection.createAnswer();\n    //   await peerConnection.setLocalDescription(answer);\n    //   setHasOffer(false);\n    //   socket.emit(\"video:answer\", { answer, to: from, from: currentUserName });\n    // }\n  };\n\n  const hangUp = () => {\n    if (offerRef.current) {// implement call decline\n    }\n  };\n\n  const onVideo = async name => {\n    peerConnectionRef.current = new RTCPeerConnection(configuration);\n    peerConnectionRef.current.addEventListener(\"icecandidate\", event => {\n      console.log(\"icecandidate: \", event);\n    });\n    peerConnectionRef.current.addEventListener(\"icegatheringstatechange\", event => {\n      console.log(\"icegatheringstatechange: \", event);\n    });\n    peerConnectionRef.current.addEventListener('track', async ({\n      track\n    }) => {\n      // remoteStream.addTrack(track, remoteStream);\n      console.log('got track: ', {\n        track\n      });\n      remoteStream.addTrack(track);\n    });\n    foreignVideoRef.current.srcObject = remoteStream;\n    const offer = await peerConnectionRef.current.createOffer();\n    await peerConnectionRef.current.setLocalDescription(offer);\n    socket.on(\"video:answer\", async data => {\n      const {\n        answer,\n        to,\n        from\n      } = data;\n      console.log(\"got answer: \", {\n        answer,\n        to,\n        from\n      });\n      const remoteDesc = new RTCSessionDescription(answer);\n      await peerConnectionRef.current.setRemoteDescription(remoteDesc);\n    });\n    socket.emit(\"video:offer\", {\n      offer,\n      to: name,\n      from: currentUserName\n    });\n    peerConnectionRef.current.addEventListener(\"track\", ({\n      track\n    }) => {\n      console.log(\"track: \", track); // @ts-ignore\n\n      remoteStream.addTrack(track);\n    });\n    setIsCalling(true);\n  };\n\n  const onAudio = name => {};\n\n  useLayoutEffect(() => {\n    const connect = async () => {\n      try {\n        localStream = await openMediaDevices(constraints);\n        ownVideoRef.current.srcObject = localStream; // foreignVideoRef.current.srcObject = remoteStream;\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    connect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(UserList, {\n      onAudio: onAudio,\n      onVideo: onVideo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), hasOffer && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"CALLING....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: pickUp,\n        children: \"PICK UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this), isCalling && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"CALLING...!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(LogoutButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      id: \"ownVideo\",\n      ref: ownVideoRef,\n      autoPlay: true,\n      playsInline: true,\n      controls: false,\n      style: {\n        height: \"300px\",\n        width: \"300px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      id: \"foreignVideo\",\n      ref: foreignVideoRef,\n      autoPlay: true,\n      playsInline: true,\n      controls: false,\n      style: {\n        height: \"300px\",\n        width: \"300px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatPage, \"dy7psia7tVT084LOWffawCqVqyQ=\", false, function () {\n  return [useAuthentication];\n});\n\n_c = ChatPage;\nexport { ChatPage };\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"sources":["/Users/stanislavpanchenko/Documents/development/web-rtc/web-rtc-client/src/pages/chat/Chat.page.tsx"],"names":["React","useEffect","useLayoutEffect","useRef","useState","LogoutButton","UserList","socket","useAuthentication","openMediaDevices","constraints","navigator","mediaDevices","getUserMedia","video","audio","localStream","remoteStream","MediaStream","configuration","iceServers","urls","username","credential","ChatPage","hasOffer","setHasOffer","ownVideoRef","foreignVideoRef","peerConnectionRef","offerRef","from","offer","isCalling","setIsCalling","name","currentUserName","on","data","to","console","log","current","RTCPeerConnection","addEventListener","event","setRemoteDescription","RTCSessionDescription","answer","createAnswer","setLocalDescription","getTracks","forEach","track","addTrack","emit","pickUp","hangUp","onVideo","srcObject","createOffer","remoteDesc","onAudio","connect","e","error","height","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { LogoutButton } from \"./components/logout-button/logout-button\";\nimport { UserList } from \"./components/user-list/UserList\";\nimport { useSubscription } from \"../../socket/use-subscription/useSubscription\";\nimport { socket } from \"../../socket/socket\";\nimport { useAuthentication } from \"../../context/authentication/Authentication.context\";\n\nconst openMediaDevices = async (constraints: any) => {\n  return await navigator.mediaDevices.getUserMedia(constraints);\n};\n\nconst constraints = { video: true, audio: false };\nlet localStream: any = null;\n\nconst remoteStream = new MediaStream();\n\nconst configuration = {\n  iceServers: [\n    {\n      urls: \"turn:10.103.0.246:3478\",\n      username: \"username\",\n      credential: \"password\",\n    },\n  ],\n};\n// let peerConnection = new RTCPeerConnection(configuration);\n\nconst ChatPage = () => {\n  const [hasOffer, setHasOffer] = useState(false);\n  const ownVideoRef = useRef<any>();\n  const foreignVideoRef = useRef<any>();\n  const peerConnectionRef = useRef<any>();\n  const offerRef = useRef<{ from: string | null; offer: any }>({\n    from: null,\n    offer: null,\n  });\n  const [isCalling, setIsCalling] = useState(false);\n  const [{ name: currentUserName }] = useAuthentication();\n\n  useEffect(() => {\n    // peerConnection.addEventListener(\"signalingstatechange\", (event) => {\n    //   console.log(\"signalingstatechange: \", event);\n    // });\n    // peerConnectionRef.current.addEventListener(\"icecandidate\", (event: any) => {\n    //   console.log(\"icecandidate: \", event);\n    // });\n    // peerConnectionRef.current.addEventListener(\"icegatheringstatechange\", (event: any) => {\n    //   console.log(\"icegatheringstatechange: \", event);\n    // });\n  }, []);\n\n  // useSubscription(\"video:answer\", async ({ answer, from }) => {\n  //   const remoteDesc = new RTCSessionDescription(answer);\n  //   await peerConnection.setRemoteDescription(remoteDesc);\n  //   setIsCalling(false);\n  //\n  //   localStream.getTracks().forEach((track: any) => {\n  //     peerConnection.addTrack(track, localStream);\n  //   });\n  //\n  //   // console.log(answer, from);\n  // });\n\n  // useSubscription(\"video:offer\", async ({ offer, from }) => {\n  //   setHasOffer(true);\n  //   offerRef.current = { offer, from };\n  //   // console.log(offer, from);\n  // });\n\n  useEffect(() => {\n    socket.on(\"video:offer\", async (data: any) => {\n      const { to, from, offer } = data;\n\n      console.log(\"got offer: \", { to, from, offer });\n\n      peerConnectionRef.current = new RTCPeerConnection(configuration);\n\n      peerConnectionRef.current.addEventListener(\n        \"signalingstatechange\",\n        (event: any) => {\n          console.log(\"signalingstatechange: \", event);\n        }\n      );\n\n      await peerConnectionRef.current.setRemoteDescription(\n        new RTCSessionDescription(offer)\n      );\n      const answer = await peerConnectionRef.current.createAnswer();\n      await peerConnectionRef.current.setLocalDescription(answer);\n\n      localStream.getTracks().forEach((track: MediaStreamTrack) => {\n        peerConnectionRef.current.addTrack(track, localStream);\n      });\n\n      socket.emit(\"video:answer\", { answer: answer, to: from, from: to });\n    });\n  }, []);\n\n  const pickUp = async () => {\n    // if (offerRef.current.offer) {\n    //   // create answer\n    //   const { from, offer } = offerRef.current;\n    //   await peerConnection.setRemoteDescription(\n    //     new RTCSessionDescription(offer)\n    //   );\n    //   const answer = await peerConnection.createAnswer();\n    //   await peerConnection.setLocalDescription(answer);\n    //   setHasOffer(false);\n    //   socket.emit(\"video:answer\", { answer, to: from, from: currentUserName });\n    // }\n  };\n\n  const hangUp = () => {\n    if (offerRef.current) {\n      // implement call decline\n    }\n  };\n\n  const onVideo = async (name: string) => {\n    peerConnectionRef.current = new RTCPeerConnection(configuration);\n\n    peerConnectionRef.current.addEventListener(\"icecandidate\", (event: any) => {\n      console.log(\"icecandidate: \", event);\n    });\n    peerConnectionRef.current.addEventListener(\n      \"icegatheringstatechange\",\n      (event: any) => {\n        console.log(\"icegatheringstatechange: \", event);\n      }\n    );\n\n    peerConnectionRef.current.addEventListener('track', async ({track}: {track: MediaStreamTrack}) => {\n      // remoteStream.addTrack(track, remoteStream);\n      console.log('got track: ', {track})\n      remoteStream.addTrack(track);\n    });\n    foreignVideoRef.current.srcObject = remoteStream\n\n    const offer = await peerConnectionRef.current.createOffer();\n    await peerConnectionRef.current.setLocalDescription(offer);\n\n    socket.on(\"video:answer\", async (data: any) => {\n      const { answer, to, from } = data;\n      console.log(\"got answer: \", { answer, to, from });\n      const remoteDesc = new RTCSessionDescription(answer);\n      await peerConnectionRef.current.setRemoteDescription(remoteDesc);\n    });\n\n    socket.emit(\"video:offer\", { offer, to: name, from: currentUserName });\n\n    peerConnectionRef.current.addEventListener(\"track\", ({ track }: any) => {\n      console.log(\"track: \", track);\n      // @ts-ignore\n      remoteStream.addTrack(track);\n    });\n    setIsCalling(true);\n  };\n\n  const onAudio = (name: string) => {};\n\n  useLayoutEffect(() => {\n    const connect = async () => {\n      try {\n        localStream = await openMediaDevices(constraints);\n        ownVideoRef.current.srcObject = localStream;\n        // foreignVideoRef.current.srcObject = remoteStream;\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    connect();\n  }, []);\n\n  return (\n    <div>\n      <UserList onAudio={onAudio} onVideo={onVideo} />\n      {hasOffer && (\n        <div>\n          <div>CALLING....</div>\n          <button onClick={pickUp}>PICK UP</button>\n          {/*<button>HANG UP</button>*/}\n        </div>\n      )}\n      {isCalling && (\n        <div>\n          <div>CALLING...!</div>\n        </div>\n      )}\n      <LogoutButton />\n\n      <video\n        id={\"ownVideo\"}\n        ref={ownVideoRef}\n        autoPlay\n        playsInline\n        controls={false}\n        style={{\n          height: \"300px\",\n          width: \"300px\",\n        }}\n      />\n      <video\n        id={\"foreignVideo\"}\n        ref={foreignVideoRef}\n        autoPlay\n        playsInline\n        controls={false}\n        style={{\n          height: \"300px\",\n          width: \"300px\",\n        }}\n      />\n    </div>\n  );\n};\n\nexport { ChatPage };\n"]},"metadata":{},"sourceType":"module"}